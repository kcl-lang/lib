// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KclLib.API {

  /// <summary>Holder for reflection information generated from spec.proto</summary>
  public static partial class SpecReflection {

    #region Descriptor
    /// <summary>File descriptor for spec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpzcGVjLnByb3RvEgtjb20ua2NsLmFwaSIxCgtFeHRlcm5hbFBrZxIQCghw",
            "a2dfbmFtZRgBIAEoCRIQCghwa2dfcGF0aBgCIAEoCSInCghBcmd1bWVudBIM",
            "CgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgJIkwKBUVycm9yEg0KBWxldmVs",
            "GAEgASgJEgwKBGNvZGUYAiABKAkSJgoIbWVzc2FnZXMYAyADKAsyFC5jb20u",
            "a2NsLmFwaS5NZXNzYWdlIjoKB01lc3NhZ2USCwoDbXNnGAEgASgJEiIKA3Bv",
            "cxgCIAEoCzIVLmNvbS5rY2wuYXBpLlBvc2l0aW9uIhoKCVBpbmdfQXJncxIN",
            "CgV2YWx1ZRgBIAEoCSIcCgtQaW5nX1Jlc3VsdBINCgV2YWx1ZRgBIAEoCSIR",
            "Cg9HZXRWZXJzaW9uX0FyZ3MiXQoRR2V0VmVyc2lvbl9SZXN1bHQSDwoHdmVy",
            "c2lvbhgBIAEoCRIQCghjaGVja3N1bRgCIAEoCRIPCgdnaXRfc2hhGAMgASgJ",
            "EhQKDHZlcnNpb25faW5mbxgEIAEoCSIRCg9MaXN0TWV0aG9kX0FyZ3MiLQoR",
            "TGlzdE1ldGhvZF9SZXN1bHQSGAoQbWV0aG9kX25hbWVfbGlzdBgBIAMoCSJf",
            "Cg5QYXJzZUZpbGVfQXJncxIMCgRwYXRoGAEgASgJEg4KBnNvdXJjZRgCIAEo",
            "CRIvCg1leHRlcm5hbF9wa2dzGAMgAygLMhguY29tLmtjbC5hcGkuRXh0ZXJu",
            "YWxQa2ciVgoQUGFyc2VGaWxlX1Jlc3VsdBIQCghhc3RfanNvbhgBIAEoCRIM",
            "CgRkZXBzGAIgAygJEiIKBmVycm9ycxgDIAMoCzISLmNvbS5rY2wuYXBpLkVy",
            "cm9yImQKEVBhcnNlUHJvZ3JhbV9BcmdzEg0KBXBhdGhzGAEgAygJEg8KB3Nv",
            "dXJjZXMYAiADKAkSLwoNZXh0ZXJuYWxfcGtncxgDIAMoCzIYLmNvbS5rY2wu",
            "YXBpLkV4dGVybmFsUGtnIloKE1BhcnNlUHJvZ3JhbV9SZXN1bHQSEAoIYXN0",
            "X2pzb24YASABKAkSDQoFcGF0aHMYAiADKAkSIgoGZXJyb3JzGAMgAygLMhIu",
            "Y29tLmtjbC5hcGkuRXJyb3IiiQEKEExvYWRQYWNrYWdlX0FyZ3MSMgoKcGFy",
            "c2VfYXJncxgBIAEoCzIeLmNvbS5rY2wuYXBpLlBhcnNlUHJvZ3JhbV9Bcmdz",
            "EhMKC3Jlc29sdmVfYXN0GAIgASgIEhQKDGxvYWRfYnVpbHRpbhgDIAEoCBIW",
            "Cg53aXRoX2FzdF9pbmRleBgEIAEoCCL3BwoSTG9hZFBhY2thZ2VfUmVzdWx0",
            "Eg8KB3Byb2dyYW0YASABKAkSDQoFcGF0aHMYAiADKAkSKAoMcGFyc2VfZXJy",
            "b3JzGAMgAygLMhIuY29tLmtjbC5hcGkuRXJyb3ISJwoLdHlwZV9lcnJvcnMY",
            "BCADKAsyEi5jb20ua2NsLmFwaS5FcnJvchI7CgZzY29wZXMYBSADKAsyKy5j",
            "b20ua2NsLmFwaS5Mb2FkUGFja2FnZV9SZXN1bHQuU2NvcGVzRW50cnkSPQoH",
            "c3ltYm9scxgGIAMoCzIsLmNvbS5rY2wuYXBpLkxvYWRQYWNrYWdlX1Jlc3Vs",
            "dC5TeW1ib2xzRW50cnkSSwoPbm9kZV9zeW1ib2xfbWFwGAcgAygLMjIuY29t",
            "LmtjbC5hcGkuTG9hZFBhY2thZ2VfUmVzdWx0Lk5vZGVTeW1ib2xNYXBFbnRy",
            "eRJLCg9zeW1ib2xfbm9kZV9tYXAYCCADKAsyMi5jb20ua2NsLmFwaS5Mb2Fk",
            "UGFja2FnZV9SZXN1bHQuU3ltYm9sTm9kZU1hcEVudHJ5ElwKGGZ1bGx5X3F1",
            "YWxpZmllZF9uYW1lX21hcBgJIAMoCzI6LmNvbS5rY2wuYXBpLkxvYWRQYWNr",
            "YWdlX1Jlc3VsdC5GdWxseVF1YWxpZmllZE5hbWVNYXBFbnRyeRJHCg1wa2df",
            "c2NvcGVfbWFwGAogAygLMjAuY29tLmtjbC5hcGkuTG9hZFBhY2thZ2VfUmVz",
            "dWx0LlBrZ1Njb3BlTWFwRW50cnkaQQoLU2NvcGVzRW50cnkSCwoDa2V5GAEg",
            "ASgJEiEKBXZhbHVlGAIgASgLMhIuY29tLmtjbC5hcGkuU2NvcGU6AjgBGkMK",
            "DFN5bWJvbHNFbnRyeRILCgNrZXkYASABKAkSIgoFdmFsdWUYAiABKAsyEy5j",
            "b20ua2NsLmFwaS5TeW1ib2w6AjgBGk4KEk5vZGVTeW1ib2xNYXBFbnRyeRIL",
            "CgNrZXkYASABKAkSJwoFdmFsdWUYAiABKAsyGC5jb20ua2NsLmFwaS5TeW1i",
            "b2xJbmRleDoCOAEaNAoSU3ltYm9sTm9kZU1hcEVudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEaVgoaRnVsbHlRdWFsaWZpZWROYW1lTWFw",
            "RW50cnkSCwoDa2V5GAEgASgJEicKBXZhbHVlGAIgASgLMhguY29tLmtjbC5h",
            "cGkuU3ltYm9sSW5kZXg6AjgBGksKEFBrZ1Njb3BlTWFwRW50cnkSCwoDa2V5",
            "GAEgASgJEiYKBXZhbHVlGAIgASgLMhcuY29tLmtjbC5hcGkuU2NvcGVJbmRl",
            "eDoCOAEiPgoSTGlzdE9wdGlvbnNfUmVzdWx0EigKB29wdGlvbnMYAiADKAsy",
            "Fy5jb20ua2NsLmFwaS5PcHRpb25IZWxwIl8KCk9wdGlvbkhlbHASDAoEbmFt",
            "ZRgBIAEoCRIMCgR0eXBlGAIgASgJEhAKCHJlcXVpcmVkGAMgASgIEhUKDWRl",
            "ZmF1bHRfdmFsdWUYBCABKAkSDAoEaGVscBgFIAEoCSLEAQoGU3ltYm9sEiAK",
            "AnR5GAEgASgLMhQuY29tLmtjbC5hcGkuS2NsVHlwZRIMCgRuYW1lGAIgASgJ",
            "EicKBW93bmVyGAMgASgLMhguY29tLmtjbC5hcGkuU3ltYm9sSW5kZXgSJQoD",
            "ZGVmGAQgASgLMhguY29tLmtjbC5hcGkuU3ltYm9sSW5kZXgSJwoFYXR0cnMY",
            "BSADKAsyGC5jb20ua2NsLmFwaS5TeW1ib2xJbmRleBIRCglpc19nbG9iYWwY",
            "BiABKAgiugEKBVNjb3BlEgwKBGtpbmQYASABKAkSJwoGcGFyZW50GAIgASgL",
            "MhcuY29tLmtjbC5hcGkuU2NvcGVJbmRleBInCgVvd25lchgDIAEoCzIYLmNv",
            "bS5rY2wuYXBpLlN5bWJvbEluZGV4EikKCGNoaWxkcmVuGAQgAygLMhcuY29t",
            "LmtjbC5hcGkuU2NvcGVJbmRleBImCgRkZWZzGAUgAygLMhguY29tLmtjbC5h",
            "cGkuU3ltYm9sSW5kZXgiMQoLU3ltYm9sSW5kZXgSCQoBaRgBIAEoBBIJCgFn",
            "GAIgASgEEgwKBGtpbmQYAyABKAkiMAoKU2NvcGVJbmRleBIJCgFpGAEgASgE",
            "EgkKAWcYAiABKAQSDAoEa2luZBgDIAEoCSLQAwoQRXhlY1Byb2dyYW1fQXJn",
            "cxIQCgh3b3JrX2RpchgBIAEoCRIXCg9rX2ZpbGVuYW1lX2xpc3QYAiADKAkS",
            "EwoLa19jb2RlX2xpc3QYAyADKAkSIwoEYXJncxgEIAMoCzIVLmNvbS5rY2wu",
            "YXBpLkFyZ3VtZW50EhEKCW92ZXJyaWRlcxgFIAMoCRIbChNkaXNhYmxlX3lh",
            "bWxfcmVzdWx0GAYgASgIEhoKEnByaW50X292ZXJyaWRlX2FzdBgHIAEoCBIa",
            "ChJzdHJpY3RfcmFuZ2VfY2hlY2sYCCABKAgSFAoMZGlzYWJsZV9ub25lGAkg",
            "ASgIEg8KB3ZlcmJvc2UYCiABKAUSDQoFZGVidWcYCyABKAUSEQoJc29ydF9r",
            "ZXlzGAwgASgIEi8KDWV4dGVybmFsX3BrZ3MYDSADKAsyGC5jb20ua2NsLmFw",
            "aS5FeHRlcm5hbFBrZxIgChhpbmNsdWRlX3NjaGVtYV90eXBlX3BhdGgYDiAB",
            "KAgSFAoMY29tcGlsZV9vbmx5GA8gASgIEhMKC3Nob3dfaGlkZGVuGBAgASgI",
            "EhUKDXBhdGhfc2VsZWN0b3IYESADKAkSEQoJZmFzdF9ldmFsGBIgASgIImgK",
            "EkV4ZWNQcm9ncmFtX1Jlc3VsdBITCgtqc29uX3Jlc3VsdBgBIAEoCRITCgt5",
            "YW1sX3Jlc3VsdBgCIAEoCRITCgtsb2dfbWVzc2FnZRgDIAEoCRITCgtlcnJf",
            "bWVzc2FnZRgEIAEoCSJVChFCdWlsZFByb2dyYW1fQXJncxIwCglleGVjX2Fy",
            "Z3MYASABKAsyHS5jb20ua2NsLmFwaS5FeGVjUHJvZ3JhbV9BcmdzEg4KBm91",
            "dHB1dBgCIAEoCSIjChNCdWlsZFByb2dyYW1fUmVzdWx0EgwKBHBhdGgYASAB",
            "KAkiUwoRRXhlY0FydGlmYWN0X0FyZ3MSDAoEcGF0aBgBIAEoCRIwCglleGVj",
            "X2FyZ3MYAiABKAsyHS5jb20ua2NsLmFwaS5FeGVjUHJvZ3JhbV9BcmdzIiEK",
            "D0Zvcm1hdENvZGVfQXJncxIOCgZzb3VyY2UYASABKAkiJgoRRm9ybWF0Q29k",
            "ZV9SZXN1bHQSEQoJZm9ybWF0dGVkGAEgASgMIh8KD0Zvcm1hdFBhdGhfQXJn",
            "cxIMCgRwYXRoGAEgASgJIioKEUZvcm1hdFBhdGhfUmVzdWx0EhUKDWNoYW5n",
            "ZWRfcGF0aHMYASADKAkiHgoNTGludFBhdGhfQXJncxINCgVwYXRocxgBIAMo",
            "CSIiCg9MaW50UGF0aF9SZXN1bHQSDwoHcmVzdWx0cxgBIAMoCSJGChFPdmVy",
            "cmlkZUZpbGVfQXJncxIMCgRmaWxlGAEgASgJEg0KBXNwZWNzGAIgAygJEhQK",
            "DGltcG9ydF9wYXRocxgDIAMoCSJPChNPdmVycmlkZUZpbGVfUmVzdWx0Eg4K",
            "BnJlc3VsdBgBIAEoCBIoCgxwYXJzZV9lcnJvcnMYAiADKAsyEi5jb20ua2Ns",
            "LmFwaS5FcnJvciIuChVMaXN0VmFyaWFibGVzX09wdGlvbnMSFQoNbWVyZ2Vf",
            "cHJvZ3JhbRgBIAEoCCI4CgxWYXJpYWJsZUxpc3QSKAoJdmFyaWFibGVzGAEg",
            "AygLMhUuY29tLmtjbC5hcGkuVmFyaWFibGUiZwoSTGlzdFZhcmlhYmxlc19B",
            "cmdzEg0KBWZpbGVzGAEgAygJEg0KBXNwZWNzGAIgAygJEjMKB29wdGlvbnMY",
            "AyABKAsyIi5jb20ua2NsLmFwaS5MaXN0VmFyaWFibGVzX09wdGlvbnMi7QEK",
            "FExpc3RWYXJpYWJsZXNfUmVzdWx0EkMKCXZhcmlhYmxlcxgBIAMoCzIwLmNv",
            "bS5rY2wuYXBpLkxpc3RWYXJpYWJsZXNfUmVzdWx0LlZhcmlhYmxlc0VudHJ5",
            "EhkKEXVuc3VwcG9ydGVkX2NvZGVzGAIgAygJEigKDHBhcnNlX2Vycm9ycxgD",
            "IAMoCzISLmNvbS5rY2wuYXBpLkVycm9yGksKDlZhcmlhYmxlc0VudHJ5EgsK",
            "A2tleRgBIAEoCRIoCgV2YWx1ZRgCIAEoCzIZLmNvbS5rY2wuYXBpLlZhcmlh",
            "YmxlTGlzdDoCOAEilAEKCFZhcmlhYmxlEg0KBXZhbHVlGAEgASgJEhEKCXR5",
            "cGVfbmFtZRgCIAEoCRIOCgZvcF9zeW0YAyABKAkSKQoKbGlzdF9pdGVtcxgE",
            "IAMoCzIVLmNvbS5rY2wuYXBpLlZhcmlhYmxlEisKDGRpY3RfZW50cmllcxgF",
            "IAMoCzIVLmNvbS5rY2wuYXBpLk1hcEVudHJ5Ij0KCE1hcEVudHJ5EgsKA2tl",
            "eRgBIAEoCRIkCgV2YWx1ZRgCIAEoCzIVLmNvbS5rY2wuYXBpLlZhcmlhYmxl",
            "ImIKGUdldFNjaGVtYVR5cGVNYXBwaW5nX0FyZ3MSMAoJZXhlY19hcmdzGAEg",
            "ASgLMh0uY29tLmtjbC5hcGkuRXhlY1Byb2dyYW1fQXJncxITCgtzY2hlbWFf",
            "bmFtZRgCIAEoCSLLAQobR2V0U2NoZW1hVHlwZU1hcHBpbmdfUmVzdWx0ElwK",
            "E3NjaGVtYV90eXBlX21hcHBpbmcYASADKAsyPy5jb20ua2NsLmFwaS5HZXRT",
            "Y2hlbWFUeXBlTWFwcGluZ19SZXN1bHQuU2NoZW1hVHlwZU1hcHBpbmdFbnRy",
            "eRpOChZTY2hlbWFUeXBlTWFwcGluZ0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2",
            "YWx1ZRgCIAEoCzIULmNvbS5rY2wuYXBpLktjbFR5cGU6AjgBIrgBChFWYWxp",
            "ZGF0ZUNvZGVfQXJncxIQCghkYXRhZmlsZRgBIAEoCRIMCgRkYXRhGAIgASgJ",
            "EgwKBGZpbGUYAyABKAkSDAoEY29kZRgEIAEoCRIOCgZzY2hlbWEYBSABKAkS",
            "FgoOYXR0cmlidXRlX25hbWUYBiABKAkSDgoGZm9ybWF0GAcgASgJEi8KDWV4",
            "dGVybmFsX3BrZ3MYCCADKAsyGC5jb20ua2NsLmFwaS5FeHRlcm5hbFBrZyI7",
            "ChNWYWxpZGF0ZUNvZGVfUmVzdWx0Eg8KB3N1Y2Nlc3MYASABKAgSEwoLZXJy",
            "X21lc3NhZ2UYAiABKAkiOgoIUG9zaXRpb24SDAoEbGluZRgBIAEoAxIOCgZj",
            "b2x1bW4YAiABKAMSEAoIZmlsZW5hbWUYAyABKAkiaQoRTGlzdERlcEZpbGVz",
            "X0FyZ3MSEAoId29ya19kaXIYASABKAkSFAoMdXNlX2Fic19wYXRoGAIgASgI",
            "EhMKC2luY2x1ZGVfYWxsGAMgASgIEhcKD3VzZV9mYXN0X3BhcnNlchgEIAEo",
            "CCJGChNMaXN0RGVwRmlsZXNfUmVzdWx0Eg8KB3BrZ3Jvb3QYASABKAkSDwoH",
            "cGtncGF0aBgCIAEoCRINCgVmaWxlcxgDIAMoCSI5ChZMb2FkU2V0dGluZ3NG",
            "aWxlc19BcmdzEhAKCHdvcmtfZGlyGAEgASgJEg0KBWZpbGVzGAIgAygJInsK",
            "GExvYWRTZXR0aW5nc0ZpbGVzX1Jlc3VsdBIvCg9rY2xfY2xpX2NvbmZpZ3MY",
            "ASABKAsyFi5jb20ua2NsLmFwaS5DbGlDb25maWcSLgoLa2NsX29wdGlvbnMY",
            "AiADKAsyGS5jb20ua2NsLmFwaS5LZXlWYWx1ZVBhaXIigwIKCUNsaUNvbmZp",
            "ZxINCgVmaWxlcxgBIAMoCRIOCgZvdXRwdXQYAiABKAkSEQoJb3ZlcnJpZGVz",
            "GAMgAygJEhUKDXBhdGhfc2VsZWN0b3IYBCADKAkSGgoSc3RyaWN0X3Jhbmdl",
            "X2NoZWNrGAUgASgIEhQKDGRpc2FibGVfbm9uZRgGIAEoCBIPCgd2ZXJib3Nl",
            "GAcgASgDEg0KBWRlYnVnGAggASgIEhEKCXNvcnRfa2V5cxgJIAEoCBITCgtz",
            "aG93X2hpZGRlbhgKIAEoCBIgChhpbmNsdWRlX3NjaGVtYV90eXBlX3BhdGgY",
            "CyABKAgSEQoJZmFzdF9ldmFsGAwgASgIIioKDEtleVZhbHVlUGFpchILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAkiXgoLUmVuYW1lX0FyZ3MSFAoMcGFj",
            "a2FnZV9yb290GAEgASgJEhMKC3N5bWJvbF9wYXRoGAIgASgJEhIKCmZpbGVf",
            "cGF0aHMYAyADKAkSEAoIbmV3X25hbWUYBCABKAkiJgoNUmVuYW1lX1Jlc3Vs",
            "dBIVCg1jaGFuZ2VkX2ZpbGVzGAEgAygJIscBCg9SZW5hbWVDb2RlX0FyZ3MS",
            "FAoMcGFja2FnZV9yb290GAEgASgJEhMKC3N5bWJvbF9wYXRoGAIgASgJEkMK",
            "DHNvdXJjZV9jb2RlcxgDIAMoCzItLmNvbS5rY2wuYXBpLlJlbmFtZUNvZGVf",
            "QXJncy5Tb3VyY2VDb2Rlc0VudHJ5EhAKCG5ld19uYW1lGAQgASgJGjIKEFNv",
            "dXJjZUNvZGVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "ASKRAQoRUmVuYW1lQ29kZV9SZXN1bHQSRwoNY2hhbmdlZF9jb2RlcxgBIAMo",
            "CzIwLmNvbS5rY2wuYXBpLlJlbmFtZUNvZGVfUmVzdWx0LkNoYW5nZWRDb2Rl",
            "c0VudHJ5GjMKEUNoYW5nZWRDb2Rlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2",
            "YWx1ZRgCIAEoCToCOAEidgoJVGVzdF9BcmdzEjAKCWV4ZWNfYXJncxgBIAEo",
            "CzIdLmNvbS5rY2wuYXBpLkV4ZWNQcm9ncmFtX0FyZ3MSEAoIcGtnX2xpc3QY",
            "AiADKAkSEgoKcnVuX3JlZ2V4cBgDIAEoCRIRCglmYWlsX2Zhc3QYBCABKAgi",
            "NgoLVGVzdF9SZXN1bHQSJwoEaW5mbxgCIAMoCzIZLmNvbS5rY2wuYXBpLlRl",
            "c3RDYXNlSW5mbyJSCgxUZXN0Q2FzZUluZm8SDAoEbmFtZRgBIAEoCRINCgVl",
            "cnJvchgCIAEoCRIQCghkdXJhdGlvbhgDIAEoBBITCgtsb2dfbWVzc2FnZRgE",
            "IAEoCSJAChdVcGRhdGVEZXBlbmRlbmNpZXNfQXJncxIVCg1tYW5pZmVzdF9w",
            "YXRoGAEgASgJEg4KBnZlbmRvchgCIAEoCCJMChlVcGRhdGVEZXBlbmRlbmNp",
            "ZXNfUmVzdWx0Ei8KDWV4dGVybmFsX3BrZ3MYAyADKAsyGC5jb20ua2NsLmFw",
            "aS5FeHRlcm5hbFBrZyLzBAoHS2NsVHlwZRIMCgR0eXBlGAEgASgJEikKC3Vu",
            "aW9uX3R5cGVzGAIgAygLMhQuY29tLmtjbC5hcGkuS2NsVHlwZRIPCgdkZWZh",
            "dWx0GAMgASgJEhMKC3NjaGVtYV9uYW1lGAQgASgJEhIKCnNjaGVtYV9kb2MY",
            "BSABKAkSOAoKcHJvcGVydGllcxgGIAMoCzIkLmNvbS5rY2wuYXBpLktjbFR5",
            "cGUuUHJvcGVydGllc0VudHJ5EhAKCHJlcXVpcmVkGAcgAygJEiEKA2tleRgI",
            "IAEoCzIULmNvbS5rY2wuYXBpLktjbFR5cGUSIgoEaXRlbRgJIAEoCzIULmNv",
            "bS5rY2wuYXBpLktjbFR5cGUSDAoEbGluZRgKIAEoBRIqCgpkZWNvcmF0b3Jz",
            "GAsgAygLMhYuY29tLmtjbC5hcGkuRGVjb3JhdG9yEhAKCGZpbGVuYW1lGAwg",
            "ASgJEhAKCHBrZ19wYXRoGA0gASgJEhMKC2Rlc2NyaXB0aW9uGA4gASgJEjQK",
            "CGV4YW1wbGVzGA8gAygLMiIuY29tLmtjbC5hcGkuS2NsVHlwZS5FeGFtcGxl",
            "c0VudHJ5EikKC2Jhc2Vfc2NoZW1hGBAgASgLMhQuY29tLmtjbC5hcGkuS2Ns",
            "VHlwZRpHCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVl",
            "GAIgASgLMhQuY29tLmtjbC5hcGkuS2NsVHlwZToCOAEaRQoNRXhhbXBsZXNF",
            "bnRyeRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5jb20ua2NsLmFw",
            "aS5FeGFtcGxlOgI4ASKVAQoJRGVjb3JhdG9yEgwKBG5hbWUYASABKAkSEQoJ",
            "YXJndW1lbnRzGAIgAygJEjYKCGtleXdvcmRzGAMgAygLMiQuY29tLmtjbC5h",
            "cGkuRGVjb3JhdG9yLktleXdvcmRzRW50cnkaLwoNS2V5d29yZHNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIj4KB0V4YW1wbGUSDwoH",
            "c3VtbWFyeRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRINCgV2YWx1ZRgD",
            "IAEoCTKWAQoOQnVpbHRpblNlcnZpY2USOAoEUGluZxIWLmNvbS5rY2wuYXBp",
            "LlBpbmdfQXJncxoYLmNvbS5rY2wuYXBpLlBpbmdfUmVzdWx0EkoKCkxpc3RN",
            "ZXRob2QSHC5jb20ua2NsLmFwaS5MaXN0TWV0aG9kX0FyZ3MaHi5jb20ua2Ns",
            "LmFwaS5MaXN0TWV0aG9kX1Jlc3VsdDLeDQoMS2Nsdm1TZXJ2aWNlEjgKBFBp",
            "bmcSFi5jb20ua2NsLmFwaS5QaW5nX0FyZ3MaGC5jb20ua2NsLmFwaS5QaW5n",
            "X1Jlc3VsdBJKCgpHZXRWZXJzaW9uEhwuY29tLmtjbC5hcGkuR2V0VmVyc2lv",
            "bl9BcmdzGh4uY29tLmtjbC5hcGkuR2V0VmVyc2lvbl9SZXN1bHQSUAoMUGFy",
            "c2VQcm9ncmFtEh4uY29tLmtjbC5hcGkuUGFyc2VQcm9ncmFtX0FyZ3MaIC5j",
            "b20ua2NsLmFwaS5QYXJzZVByb2dyYW1fUmVzdWx0EkcKCVBhcnNlRmlsZRIb",
            "LmNvbS5rY2wuYXBpLlBhcnNlRmlsZV9BcmdzGh0uY29tLmtjbC5hcGkuUGFy",
            "c2VGaWxlX1Jlc3VsdBJNCgtMb2FkUGFja2FnZRIdLmNvbS5rY2wuYXBpLkxv",
            "YWRQYWNrYWdlX0FyZ3MaHy5jb20ua2NsLmFwaS5Mb2FkUGFja2FnZV9SZXN1",
            "bHQSTgoLTGlzdE9wdGlvbnMSHi5jb20ua2NsLmFwaS5QYXJzZVByb2dyYW1f",
            "QXJncxofLmNvbS5rY2wuYXBpLkxpc3RPcHRpb25zX1Jlc3VsdBJTCg1MaXN0",
            "VmFyaWFibGVzEh8uY29tLmtjbC5hcGkuTGlzdFZhcmlhYmxlc19BcmdzGiEu",
            "Y29tLmtjbC5hcGkuTGlzdFZhcmlhYmxlc19SZXN1bHQSTQoLRXhlY1Byb2dy",
            "YW0SHS5jb20ua2NsLmFwaS5FeGVjUHJvZ3JhbV9BcmdzGh8uY29tLmtjbC5h",
            "cGkuRXhlY1Byb2dyYW1fUmVzdWx0ElAKDEJ1aWxkUHJvZ3JhbRIeLmNvbS5r",
            "Y2wuYXBpLkJ1aWxkUHJvZ3JhbV9BcmdzGiAuY29tLmtjbC5hcGkuQnVpbGRQ",
            "cm9ncmFtX1Jlc3VsdBJPCgxFeGVjQXJ0aWZhY3QSHi5jb20ua2NsLmFwaS5F",
            "eGVjQXJ0aWZhY3RfQXJncxofLmNvbS5rY2wuYXBpLkV4ZWNQcm9ncmFtX1Jl",
            "c3VsdBJQCgxPdmVycmlkZUZpbGUSHi5jb20ua2NsLmFwaS5PdmVycmlkZUZp",
            "bGVfQXJncxogLmNvbS5rY2wuYXBpLk92ZXJyaWRlRmlsZV9SZXN1bHQSaAoU",
            "R2V0U2NoZW1hVHlwZU1hcHBpbmcSJi5jb20ua2NsLmFwaS5HZXRTY2hlbWFU",
            "eXBlTWFwcGluZ19BcmdzGiguY29tLmtjbC5hcGkuR2V0U2NoZW1hVHlwZU1h",
            "cHBpbmdfUmVzdWx0EkoKCkZvcm1hdENvZGUSHC5jb20ua2NsLmFwaS5Gb3Jt",
            "YXRDb2RlX0FyZ3MaHi5jb20ua2NsLmFwaS5Gb3JtYXRDb2RlX1Jlc3VsdBJK",
            "CgpGb3JtYXRQYXRoEhwuY29tLmtjbC5hcGkuRm9ybWF0UGF0aF9BcmdzGh4u",
            "Y29tLmtjbC5hcGkuRm9ybWF0UGF0aF9SZXN1bHQSRAoITGludFBhdGgSGi5j",
            "b20ua2NsLmFwaS5MaW50UGF0aF9BcmdzGhwuY29tLmtjbC5hcGkuTGludFBh",
            "dGhfUmVzdWx0ElAKDFZhbGlkYXRlQ29kZRIeLmNvbS5rY2wuYXBpLlZhbGlk",
            "YXRlQ29kZV9BcmdzGiAuY29tLmtjbC5hcGkuVmFsaWRhdGVDb2RlX1Jlc3Vs",
            "dBJQCgxMaXN0RGVwRmlsZXMSHi5jb20ua2NsLmFwaS5MaXN0RGVwRmlsZXNf",
            "QXJncxogLmNvbS5rY2wuYXBpLkxpc3REZXBGaWxlc19SZXN1bHQSXwoRTG9h",
            "ZFNldHRpbmdzRmlsZXMSIy5jb20ua2NsLmFwaS5Mb2FkU2V0dGluZ3NGaWxl",
            "c19BcmdzGiUuY29tLmtjbC5hcGkuTG9hZFNldHRpbmdzRmlsZXNfUmVzdWx0",
            "Ej4KBlJlbmFtZRIYLmNvbS5rY2wuYXBpLlJlbmFtZV9BcmdzGhouY29tLmtj",
            "bC5hcGkuUmVuYW1lX1Jlc3VsdBJKCgpSZW5hbWVDb2RlEhwuY29tLmtjbC5h",
            "cGkuUmVuYW1lQ29kZV9BcmdzGh4uY29tLmtjbC5hcGkuUmVuYW1lQ29kZV9S",
            "ZXN1bHQSOAoEVGVzdBIWLmNvbS5rY2wuYXBpLlRlc3RfQXJncxoYLmNvbS5r",
            "Y2wuYXBpLlRlc3RfUmVzdWx0EmIKElVwZGF0ZURlcGVuZGVuY2llcxIkLmNv",
            "bS5rY2wuYXBpLlVwZGF0ZURlcGVuZGVuY2llc19BcmdzGiYuY29tLmtjbC5h",
            "cGkuVXBkYXRlRGVwZW5kZW5jaWVzX1Jlc3VsdEIUWgUuO2FwaaoCCktjbExp",
            "Yi5BUEliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ExternalPkg), global::KclLib.API.ExternalPkg.Parser, new[]{ "PkgName", "PkgPath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Argument), global::KclLib.API.Argument.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Error), global::KclLib.API.Error.Parser, new[]{ "Level", "Code", "Messages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Message), global::KclLib.API.Message.Parser, new[]{ "Msg", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Ping_Args), global::KclLib.API.Ping_Args.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Ping_Result), global::KclLib.API.Ping_Result.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.GetVersion_Args), global::KclLib.API.GetVersion_Args.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.GetVersion_Result), global::KclLib.API.GetVersion_Result.Parser, new[]{ "Version", "Checksum", "GitSha", "VersionInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListMethod_Args), global::KclLib.API.ListMethod_Args.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListMethod_Result), global::KclLib.API.ListMethod_Result.Parser, new[]{ "MethodNameList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ParseFile_Args), global::KclLib.API.ParseFile_Args.Parser, new[]{ "Path", "Source", "ExternalPkgs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ParseFile_Result), global::KclLib.API.ParseFile_Result.Parser, new[]{ "AstJson", "Deps", "Errors" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ParseProgram_Args), global::KclLib.API.ParseProgram_Args.Parser, new[]{ "Paths", "Sources", "ExternalPkgs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ParseProgram_Result), global::KclLib.API.ParseProgram_Result.Parser, new[]{ "AstJson", "Paths", "Errors" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.LoadPackage_Args), global::KclLib.API.LoadPackage_Args.Parser, new[]{ "ParseArgs", "ResolveAst", "LoadBuiltin", "WithAstIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.LoadPackage_Result), global::KclLib.API.LoadPackage_Result.Parser, new[]{ "Program", "Paths", "ParseErrors", "TypeErrors", "Scopes", "Symbols", "NodeSymbolMap", "SymbolNodeMap", "FullyQualifiedNameMap", "PkgScopeMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListOptions_Result), global::KclLib.API.ListOptions_Result.Parser, new[]{ "Options" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.OptionHelp), global::KclLib.API.OptionHelp.Parser, new[]{ "Name", "Type", "Required", "DefaultValue", "Help" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Symbol), global::KclLib.API.Symbol.Parser, new[]{ "Ty", "Name", "Owner", "Def", "Attrs", "IsGlobal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Scope), global::KclLib.API.Scope.Parser, new[]{ "Kind", "Parent", "Owner", "Children", "Defs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.SymbolIndex), global::KclLib.API.SymbolIndex.Parser, new[]{ "I", "G", "Kind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ScopeIndex), global::KclLib.API.ScopeIndex.Parser, new[]{ "I", "G", "Kind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ExecProgram_Args), global::KclLib.API.ExecProgram_Args.Parser, new[]{ "WorkDir", "KFilenameList", "KCodeList", "Args", "Overrides", "DisableYamlResult", "PrintOverrideAst", "StrictRangeCheck", "DisableNone", "Verbose", "Debug", "SortKeys", "ExternalPkgs", "IncludeSchemaTypePath", "CompileOnly", "ShowHidden", "PathSelector", "FastEval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ExecProgram_Result), global::KclLib.API.ExecProgram_Result.Parser, new[]{ "JsonResult", "YamlResult", "LogMessage", "ErrMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.BuildProgram_Args), global::KclLib.API.BuildProgram_Args.Parser, new[]{ "ExecArgs", "Output" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.BuildProgram_Result), global::KclLib.API.BuildProgram_Result.Parser, new[]{ "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ExecArtifact_Args), global::KclLib.API.ExecArtifact_Args.Parser, new[]{ "Path", "ExecArgs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.FormatCode_Args), global::KclLib.API.FormatCode_Args.Parser, new[]{ "Source" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.FormatCode_Result), global::KclLib.API.FormatCode_Result.Parser, new[]{ "Formatted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.FormatPath_Args), global::KclLib.API.FormatPath_Args.Parser, new[]{ "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.FormatPath_Result), global::KclLib.API.FormatPath_Result.Parser, new[]{ "ChangedPaths" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.LintPath_Args), global::KclLib.API.LintPath_Args.Parser, new[]{ "Paths" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.LintPath_Result), global::KclLib.API.LintPath_Result.Parser, new[]{ "Results" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.OverrideFile_Args), global::KclLib.API.OverrideFile_Args.Parser, new[]{ "File", "Specs", "ImportPaths" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.OverrideFile_Result), global::KclLib.API.OverrideFile_Result.Parser, new[]{ "Result", "ParseErrors" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListVariables_Options), global::KclLib.API.ListVariables_Options.Parser, new[]{ "MergeProgram" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.VariableList), global::KclLib.API.VariableList.Parser, new[]{ "Variables" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListVariables_Args), global::KclLib.API.ListVariables_Args.Parser, new[]{ "Files", "Specs", "Options" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListVariables_Result), global::KclLib.API.ListVariables_Result.Parser, new[]{ "Variables", "UnsupportedCodes", "ParseErrors" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Variable), global::KclLib.API.Variable.Parser, new[]{ "Value", "TypeName", "OpSym", "ListItems", "DictEntries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.MapEntry), global::KclLib.API.MapEntry.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.GetSchemaTypeMapping_Args), global::KclLib.API.GetSchemaTypeMapping_Args.Parser, new[]{ "ExecArgs", "SchemaName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.GetSchemaTypeMapping_Result), global::KclLib.API.GetSchemaTypeMapping_Result.Parser, new[]{ "SchemaTypeMapping" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ValidateCode_Args), global::KclLib.API.ValidateCode_Args.Parser, new[]{ "Datafile", "Data", "File", "Code", "Schema", "AttributeName", "Format", "ExternalPkgs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ValidateCode_Result), global::KclLib.API.ValidateCode_Result.Parser, new[]{ "Success", "ErrMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Position), global::KclLib.API.Position.Parser, new[]{ "Line", "Column", "Filename" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListDepFiles_Args), global::KclLib.API.ListDepFiles_Args.Parser, new[]{ "WorkDir", "UseAbsPath", "IncludeAll", "UseFastParser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.ListDepFiles_Result), global::KclLib.API.ListDepFiles_Result.Parser, new[]{ "Pkgroot", "Pkgpath", "Files" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.LoadSettingsFiles_Args), global::KclLib.API.LoadSettingsFiles_Args.Parser, new[]{ "WorkDir", "Files" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.LoadSettingsFiles_Result), global::KclLib.API.LoadSettingsFiles_Result.Parser, new[]{ "KclCliConfigs", "KclOptions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.CliConfig), global::KclLib.API.CliConfig.Parser, new[]{ "Files", "Output", "Overrides", "PathSelector", "StrictRangeCheck", "DisableNone", "Verbose", "Debug", "SortKeys", "ShowHidden", "IncludeSchemaTypePath", "FastEval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.KeyValuePair), global::KclLib.API.KeyValuePair.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Rename_Args), global::KclLib.API.Rename_Args.Parser, new[]{ "PackageRoot", "SymbolPath", "FilePaths", "NewName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Rename_Result), global::KclLib.API.Rename_Result.Parser, new[]{ "ChangedFiles" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.RenameCode_Args), global::KclLib.API.RenameCode_Args.Parser, new[]{ "PackageRoot", "SymbolPath", "SourceCodes", "NewName" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.RenameCode_Result), global::KclLib.API.RenameCode_Result.Parser, new[]{ "ChangedCodes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Test_Args), global::KclLib.API.Test_Args.Parser, new[]{ "ExecArgs", "PkgList", "RunRegexp", "FailFast" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Test_Result), global::KclLib.API.Test_Result.Parser, new[]{ "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.TestCaseInfo), global::KclLib.API.TestCaseInfo.Parser, new[]{ "Name", "Error", "Duration", "LogMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.UpdateDependencies_Args), global::KclLib.API.UpdateDependencies_Args.Parser, new[]{ "ManifestPath", "Vendor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.UpdateDependencies_Result), global::KclLib.API.UpdateDependencies_Result.Parser, new[]{ "ExternalPkgs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.KclType), global::KclLib.API.KclType.Parser, new[]{ "Type", "UnionTypes", "Default", "SchemaName", "SchemaDoc", "Properties", "Required", "Key", "Item", "Line", "Decorators", "Filename", "PkgPath", "Description", "Examples", "BaseSchema" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Decorator), global::KclLib.API.Decorator.Parser, new[]{ "Name", "Arguments", "Keywords" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::KclLib.API.Example), global::KclLib.API.Example.Parser, new[]{ "Summary", "Description", "Value" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Message representing an external package for KCL.
  /// kcl main.k -E pkg_name=pkg_path
  /// </summary>
  public sealed partial class ExternalPkg : pb::IMessage<ExternalPkg> {
    private static readonly pb::MessageParser<ExternalPkg> _parser = new pb::MessageParser<ExternalPkg>(() => new ExternalPkg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalPkg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalPkg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalPkg(ExternalPkg other) : this() {
      pkgName_ = other.pkgName_;
      pkgPath_ = other.pkgPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalPkg Clone() {
      return new ExternalPkg(this);
    }

    /// <summary>Field number for the "pkg_name" field.</summary>
    public const int PkgNameFieldNumber = 1;
    private string pkgName_ = "";
    /// <summary>
    /// Name of the package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PkgName {
      get { return pkgName_; }
      set {
        pkgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pkg_path" field.</summary>
    public const int PkgPathFieldNumber = 2;
    private string pkgPath_ = "";
    /// <summary>
    /// Path of the package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PkgPath {
      get { return pkgPath_; }
      set {
        pkgPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalPkg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalPkg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgName != other.PkgName) return false;
      if (PkgPath != other.PkgPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgName.Length != 0) hash ^= PkgName.GetHashCode();
      if (PkgPath.Length != 0) hash ^= PkgPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PkgName);
      }
      if (PkgPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PkgPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PkgName);
      }
      if (PkgPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PkgPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalPkg other) {
      if (other == null) {
        return;
      }
      if (other.PkgName.Length != 0) {
        PkgName = other.PkgName;
      }
      if (other.PkgPath.Length != 0) {
        PkgPath = other.PkgPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PkgName = input.ReadString();
            break;
          }
          case 18: {
            PkgPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a key-value argument for KCL.
  /// kcl main.k -D name=value
  /// </summary>
  public sealed partial class Argument : pb::IMessage<Argument> {
    private static readonly pb::MessageParser<Argument> _parser = new pb::MessageParser<Argument>(() => new Argument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Argument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument(Argument other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument Clone() {
      return new Argument(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Value of the argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Argument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Argument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Argument other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing an error.
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      level_ = other.level_;
      code_ = other.code_;
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private string level_ = "";
    /// <summary>
    /// Level of the error (e.g., "Error", "Warning").
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Level {
      get { return level_; }
      set {
        level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    /// <summary>
    /// Error code. (e.g., "E1001")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.Message> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.Message.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Message> messages_ = new pbc::RepeatedField<global::KclLib.API.Message>();
    /// <summary>
    /// List of error messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Message> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Code != other.Code) return false;
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level.Length != 0) hash ^= Level.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Level);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Level.Length != 0) {
        Level = other.Level;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Level = input.ReadString();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a detailed error message with a position.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      msg_ = other.msg_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private string msg_ = "";
    /// <summary>
    /// The error message text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::KclLib.API.Position pos_;
    /// <summary>
    /// The position in the source code where the error occurred.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.Position Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Msg);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::KclLib.API.Position();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Msg = input.ReadString();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::KclLib.API.Position();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for ping request arguments.
  /// </summary>
  public sealed partial class Ping_Args : pb::IMessage<Ping_Args> {
    private static readonly pb::MessageParser<Ping_Args> _parser = new pb::MessageParser<Ping_Args>(() => new Ping_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_Args(Ping_Args other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_Args Clone() {
      return new Ping_Args(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    /// Value to be sent in the ping request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping_Args other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for ping response.
  /// </summary>
  public sealed partial class Ping_Result : pb::IMessage<Ping_Result> {
    private static readonly pb::MessageParser<Ping_Result> _parser = new pb::MessageParser<Ping_Result>(() => new Ping_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_Result(Ping_Result other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping_Result Clone() {
      return new Ping_Result(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    /// Value received in the ping response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping_Result other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for version request arguments. Empty message.
  /// </summary>
  public sealed partial class GetVersion_Args : pb::IMessage<GetVersion_Args> {
    private static readonly pb::MessageParser<GetVersion_Args> _parser = new pb::MessageParser<GetVersion_Args>(() => new GetVersion_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVersion_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersion_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersion_Args(GetVersion_Args other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersion_Args Clone() {
      return new GetVersion_Args(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVersion_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVersion_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVersion_Args other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Message for version response.
  /// </summary>
  public sealed partial class GetVersion_Result : pb::IMessage<GetVersion_Result> {
    private static readonly pb::MessageParser<GetVersion_Result> _parser = new pb::MessageParser<GetVersion_Result>(() => new GetVersion_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVersion_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersion_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersion_Result(GetVersion_Result other) : this() {
      version_ = other.version_;
      checksum_ = other.checksum_;
      gitSha_ = other.gitSha_;
      versionInfo_ = other.versionInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVersion_Result Clone() {
      return new GetVersion_Result(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// KCL version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 2;
    private string checksum_ = "";
    /// <summary>
    /// Checksum of the KCL version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Checksum {
      get { return checksum_; }
      set {
        checksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "git_sha" field.</summary>
    public const int GitShaFieldNumber = 3;
    private string gitSha_ = "";
    /// <summary>
    /// Git Git SHA of the KCL code repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitSha {
      get { return gitSha_; }
      set {
        gitSha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_info" field.</summary>
    public const int VersionInfoFieldNumber = 4;
    private string versionInfo_ = "";
    /// <summary>
    /// Detailed version information as a string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionInfo {
      get { return versionInfo_; }
      set {
        versionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVersion_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVersion_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Checksum != other.Checksum) return false;
      if (GitSha != other.GitSha) return false;
      if (VersionInfo != other.VersionInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Checksum.Length != 0) hash ^= Checksum.GetHashCode();
      if (GitSha.Length != 0) hash ^= GitSha.GetHashCode();
      if (VersionInfo.Length != 0) hash ^= VersionInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Checksum.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Checksum);
      }
      if (GitSha.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GitSha);
      }
      if (VersionInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VersionInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Checksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Checksum);
      }
      if (GitSha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitSha);
      }
      if (VersionInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVersion_Result other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Checksum.Length != 0) {
        Checksum = other.Checksum;
      }
      if (other.GitSha.Length != 0) {
        GitSha = other.GitSha;
      }
      if (other.VersionInfo.Length != 0) {
        VersionInfo = other.VersionInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            Checksum = input.ReadString();
            break;
          }
          case 26: {
            GitSha = input.ReadString();
            break;
          }
          case 34: {
            VersionInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for list method request arguments. Empty message.
  /// </summary>
  public sealed partial class ListMethod_Args : pb::IMessage<ListMethod_Args> {
    private static readonly pb::MessageParser<ListMethod_Args> _parser = new pb::MessageParser<ListMethod_Args>(() => new ListMethod_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListMethod_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMethod_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMethod_Args(ListMethod_Args other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMethod_Args Clone() {
      return new ListMethod_Args(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListMethod_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListMethod_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListMethod_Args other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Message for list method response.
  /// </summary>
  public sealed partial class ListMethod_Result : pb::IMessage<ListMethod_Result> {
    private static readonly pb::MessageParser<ListMethod_Result> _parser = new pb::MessageParser<ListMethod_Result>(() => new ListMethod_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListMethod_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMethod_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMethod_Result(ListMethod_Result other) : this() {
      methodNameList_ = other.methodNameList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMethod_Result Clone() {
      return new ListMethod_Result(this);
    }

    /// <summary>Field number for the "method_name_list" field.</summary>
    public const int MethodNameListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_methodNameList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> methodNameList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of available method names.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MethodNameList {
      get { return methodNameList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListMethod_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListMethod_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!methodNameList_.Equals(other.methodNameList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= methodNameList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      methodNameList_.WriteTo(output, _repeated_methodNameList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += methodNameList_.CalculateSize(_repeated_methodNameList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListMethod_Result other) {
      if (other == null) {
        return;
      }
      methodNameList_.Add(other.methodNameList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            methodNameList_.AddEntriesFrom(input, _repeated_methodNameList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for parse file request arguments.
  /// </summary>
  public sealed partial class ParseFile_Args : pb::IMessage<ParseFile_Args> {
    private static readonly pb::MessageParser<ParseFile_Args> _parser = new pb::MessageParser<ParseFile_Args>(() => new ParseFile_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParseFile_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseFile_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseFile_Args(ParseFile_Args other) : this() {
      path_ = other.path_;
      source_ = other.source_;
      externalPkgs_ = other.externalPkgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseFile_Args Clone() {
      return new ParseFile_Args(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// Path of the file to be parsed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    /// <summary>
    /// Source code to be parsed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_pkgs" field.</summary>
    public const int ExternalPkgsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.ExternalPkg> _repeated_externalPkgs_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.ExternalPkg.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.ExternalPkg> externalPkgs_ = new pbc::RepeatedField<global::KclLib.API.ExternalPkg>();
    /// <summary>
    /// External packages path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.ExternalPkg> ExternalPkgs {
      get { return externalPkgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParseFile_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParseFile_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Source != other.Source) return false;
      if(!externalPkgs_.Equals(other.externalPkgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      hash ^= externalPkgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      externalPkgs_.WriteTo(output, _repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      size += externalPkgs_.CalculateSize(_repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParseFile_Args other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      externalPkgs_.Add(other.externalPkgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            externalPkgs_.AddEntriesFrom(input, _repeated_externalPkgs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for parse file response.
  /// </summary>
  public sealed partial class ParseFile_Result : pb::IMessage<ParseFile_Result> {
    private static readonly pb::MessageParser<ParseFile_Result> _parser = new pb::MessageParser<ParseFile_Result>(() => new ParseFile_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParseFile_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseFile_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseFile_Result(ParseFile_Result other) : this() {
      astJson_ = other.astJson_;
      deps_ = other.deps_.Clone();
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseFile_Result Clone() {
      return new ParseFile_Result(this);
    }

    /// <summary>Field number for the "ast_json" field.</summary>
    public const int AstJsonFieldNumber = 1;
    private string astJson_ = "";
    /// <summary>
    /// Abstract Syntax Tree (AST) in JSON format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AstJson {
      get { return astJson_; }
      set {
        astJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deps" field.</summary>
    public const int DepsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_deps_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> deps_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// File dependency paths.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Deps {
      get { return deps_; }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.Error.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Error> errors_ = new pbc::RepeatedField<global::KclLib.API.Error>();
    /// <summary>
    /// List of parse errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Error> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParseFile_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParseFile_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AstJson != other.AstJson) return false;
      if(!deps_.Equals(other.deps_)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AstJson.Length != 0) hash ^= AstJson.GetHashCode();
      hash ^= deps_.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AstJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AstJson);
      }
      deps_.WriteTo(output, _repeated_deps_codec);
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AstJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AstJson);
      }
      size += deps_.CalculateSize(_repeated_deps_codec);
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParseFile_Result other) {
      if (other == null) {
        return;
      }
      if (other.AstJson.Length != 0) {
        AstJson = other.AstJson;
      }
      deps_.Add(other.deps_);
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AstJson = input.ReadString();
            break;
          }
          case 18: {
            deps_.AddEntriesFrom(input, _repeated_deps_codec);
            break;
          }
          case 26: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for parse program request arguments.
  /// </summary>
  public sealed partial class ParseProgram_Args : pb::IMessage<ParseProgram_Args> {
    private static readonly pb::MessageParser<ParseProgram_Args> _parser = new pb::MessageParser<ParseProgram_Args>(() => new ParseProgram_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParseProgram_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseProgram_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseProgram_Args(ParseProgram_Args other) : this() {
      paths_ = other.paths_.Clone();
      sources_ = other.sources_.Clone();
      externalPkgs_ = other.externalPkgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseProgram_Args Clone() {
      return new ParseProgram_Args(this);
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_paths_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> paths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Paths of the program files to be parsed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Paths {
      get { return paths_; }
    }

    /// <summary>Field number for the "sources" field.</summary>
    public const int SourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sources_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sources_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Source codes to be parsed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sources {
      get { return sources_; }
    }

    /// <summary>Field number for the "external_pkgs" field.</summary>
    public const int ExternalPkgsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.ExternalPkg> _repeated_externalPkgs_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.ExternalPkg.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.ExternalPkg> externalPkgs_ = new pbc::RepeatedField<global::KclLib.API.ExternalPkg>();
    /// <summary>
    /// External packages path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.ExternalPkg> ExternalPkgs {
      get { return externalPkgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParseProgram_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParseProgram_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paths_.Equals(other.paths_)) return false;
      if(!sources_.Equals(other.sources_)) return false;
      if(!externalPkgs_.Equals(other.externalPkgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paths_.GetHashCode();
      hash ^= sources_.GetHashCode();
      hash ^= externalPkgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paths_.WriteTo(output, _repeated_paths_codec);
      sources_.WriteTo(output, _repeated_sources_codec);
      externalPkgs_.WriteTo(output, _repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paths_.CalculateSize(_repeated_paths_codec);
      size += sources_.CalculateSize(_repeated_sources_codec);
      size += externalPkgs_.CalculateSize(_repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParseProgram_Args other) {
      if (other == null) {
        return;
      }
      paths_.Add(other.paths_);
      sources_.Add(other.sources_);
      externalPkgs_.Add(other.externalPkgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
          case 18: {
            sources_.AddEntriesFrom(input, _repeated_sources_codec);
            break;
          }
          case 26: {
            externalPkgs_.AddEntriesFrom(input, _repeated_externalPkgs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for parse program response.
  /// </summary>
  public sealed partial class ParseProgram_Result : pb::IMessage<ParseProgram_Result> {
    private static readonly pb::MessageParser<ParseProgram_Result> _parser = new pb::MessageParser<ParseProgram_Result>(() => new ParseProgram_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParseProgram_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseProgram_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseProgram_Result(ParseProgram_Result other) : this() {
      astJson_ = other.astJson_;
      paths_ = other.paths_.Clone();
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParseProgram_Result Clone() {
      return new ParseProgram_Result(this);
    }

    /// <summary>Field number for the "ast_json" field.</summary>
    public const int AstJsonFieldNumber = 1;
    private string astJson_ = "";
    /// <summary>
    /// Abstract Syntax Tree (AST) in JSON format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AstJson {
      get { return astJson_; }
      set {
        astJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_paths_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> paths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Returns the files in the order they should be compiled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Paths {
      get { return paths_; }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.Error.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Error> errors_ = new pbc::RepeatedField<global::KclLib.API.Error>();
    /// <summary>
    /// List of parse errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Error> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParseProgram_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParseProgram_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AstJson != other.AstJson) return false;
      if(!paths_.Equals(other.paths_)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AstJson.Length != 0) hash ^= AstJson.GetHashCode();
      hash ^= paths_.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AstJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AstJson);
      }
      paths_.WriteTo(output, _repeated_paths_codec);
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AstJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AstJson);
      }
      size += paths_.CalculateSize(_repeated_paths_codec);
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParseProgram_Result other) {
      if (other == null) {
        return;
      }
      if (other.AstJson.Length != 0) {
        AstJson = other.AstJson;
      }
      paths_.Add(other.paths_);
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AstJson = input.ReadString();
            break;
          }
          case 18: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
          case 26: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for load package request arguments.
  /// </summary>
  public sealed partial class LoadPackage_Args : pb::IMessage<LoadPackage_Args> {
    private static readonly pb::MessageParser<LoadPackage_Args> _parser = new pb::MessageParser<LoadPackage_Args>(() => new LoadPackage_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadPackage_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPackage_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPackage_Args(LoadPackage_Args other) : this() {
      parseArgs_ = other.parseArgs_ != null ? other.parseArgs_.Clone() : null;
      resolveAst_ = other.resolveAst_;
      loadBuiltin_ = other.loadBuiltin_;
      withAstIndex_ = other.withAstIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPackage_Args Clone() {
      return new LoadPackage_Args(this);
    }

    /// <summary>Field number for the "parse_args" field.</summary>
    public const int ParseArgsFieldNumber = 1;
    private global::KclLib.API.ParseProgram_Args parseArgs_;
    /// <summary>
    /// Arguments for parsing the program.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.ParseProgram_Args ParseArgs {
      get { return parseArgs_; }
      set {
        parseArgs_ = value;
      }
    }

    /// <summary>Field number for the "resolve_ast" field.</summary>
    public const int ResolveAstFieldNumber = 2;
    private bool resolveAst_;
    /// <summary>
    /// Flag indicating whether to resolve AST.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveAst {
      get { return resolveAst_; }
      set {
        resolveAst_ = value;
      }
    }

    /// <summary>Field number for the "load_builtin" field.</summary>
    public const int LoadBuiltinFieldNumber = 3;
    private bool loadBuiltin_;
    /// <summary>
    /// Flag indicating whether to load built-in modules.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LoadBuiltin {
      get { return loadBuiltin_; }
      set {
        loadBuiltin_ = value;
      }
    }

    /// <summary>Field number for the "with_ast_index" field.</summary>
    public const int WithAstIndexFieldNumber = 4;
    private bool withAstIndex_;
    /// <summary>
    /// Flag indicating whether to include AST index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithAstIndex {
      get { return withAstIndex_; }
      set {
        withAstIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadPackage_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadPackage_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ParseArgs, other.ParseArgs)) return false;
      if (ResolveAst != other.ResolveAst) return false;
      if (LoadBuiltin != other.LoadBuiltin) return false;
      if (WithAstIndex != other.WithAstIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parseArgs_ != null) hash ^= ParseArgs.GetHashCode();
      if (ResolveAst != false) hash ^= ResolveAst.GetHashCode();
      if (LoadBuiltin != false) hash ^= LoadBuiltin.GetHashCode();
      if (WithAstIndex != false) hash ^= WithAstIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parseArgs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ParseArgs);
      }
      if (ResolveAst != false) {
        output.WriteRawTag(16);
        output.WriteBool(ResolveAst);
      }
      if (LoadBuiltin != false) {
        output.WriteRawTag(24);
        output.WriteBool(LoadBuiltin);
      }
      if (WithAstIndex != false) {
        output.WriteRawTag(32);
        output.WriteBool(WithAstIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parseArgs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParseArgs);
      }
      if (ResolveAst != false) {
        size += 1 + 1;
      }
      if (LoadBuiltin != false) {
        size += 1 + 1;
      }
      if (WithAstIndex != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadPackage_Args other) {
      if (other == null) {
        return;
      }
      if (other.parseArgs_ != null) {
        if (parseArgs_ == null) {
          ParseArgs = new global::KclLib.API.ParseProgram_Args();
        }
        ParseArgs.MergeFrom(other.ParseArgs);
      }
      if (other.ResolveAst != false) {
        ResolveAst = other.ResolveAst;
      }
      if (other.LoadBuiltin != false) {
        LoadBuiltin = other.LoadBuiltin;
      }
      if (other.WithAstIndex != false) {
        WithAstIndex = other.WithAstIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (parseArgs_ == null) {
              ParseArgs = new global::KclLib.API.ParseProgram_Args();
            }
            input.ReadMessage(ParseArgs);
            break;
          }
          case 16: {
            ResolveAst = input.ReadBool();
            break;
          }
          case 24: {
            LoadBuiltin = input.ReadBool();
            break;
          }
          case 32: {
            WithAstIndex = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for load package response.
  /// </summary>
  public sealed partial class LoadPackage_Result : pb::IMessage<LoadPackage_Result> {
    private static readonly pb::MessageParser<LoadPackage_Result> _parser = new pb::MessageParser<LoadPackage_Result>(() => new LoadPackage_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadPackage_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPackage_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPackage_Result(LoadPackage_Result other) : this() {
      program_ = other.program_;
      paths_ = other.paths_.Clone();
      parseErrors_ = other.parseErrors_.Clone();
      typeErrors_ = other.typeErrors_.Clone();
      scopes_ = other.scopes_.Clone();
      symbols_ = other.symbols_.Clone();
      nodeSymbolMap_ = other.nodeSymbolMap_.Clone();
      symbolNodeMap_ = other.symbolNodeMap_.Clone();
      fullyQualifiedNameMap_ = other.fullyQualifiedNameMap_.Clone();
      pkgScopeMap_ = other.pkgScopeMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadPackage_Result Clone() {
      return new LoadPackage_Result(this);
    }

    /// <summary>Field number for the "program" field.</summary>
    public const int ProgramFieldNumber = 1;
    private string program_ = "";
    /// <summary>
    /// Program Abstract Syntax Tree (AST) in JSON format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Program {
      get { return program_; }
      set {
        program_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_paths_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> paths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Returns the files in the order they should be compiled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Paths {
      get { return paths_; }
    }

    /// <summary>Field number for the "parse_errors" field.</summary>
    public const int ParseErrorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.Error> _repeated_parseErrors_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.Error.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Error> parseErrors_ = new pbc::RepeatedField<global::KclLib.API.Error>();
    /// <summary>
    /// List of parse errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Error> ParseErrors {
      get { return parseErrors_; }
    }

    /// <summary>Field number for the "type_errors" field.</summary>
    public const int TypeErrorsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::KclLib.API.Error> _repeated_typeErrors_codec
        = pb::FieldCodec.ForMessage(34, global::KclLib.API.Error.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Error> typeErrors_ = new pbc::RepeatedField<global::KclLib.API.Error>();
    /// <summary>
    /// List of type errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Error> TypeErrors {
      get { return typeErrors_; }
    }

    /// <summary>Field number for the "scopes" field.</summary>
    public const int ScopesFieldNumber = 5;
    private static readonly pbc::MapField<string, global::KclLib.API.Scope>.Codec _map_scopes_codec
        = new pbc::MapField<string, global::KclLib.API.Scope>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.Scope.Parser), 42);
    private readonly pbc::MapField<string, global::KclLib.API.Scope> scopes_ = new pbc::MapField<string, global::KclLib.API.Scope>();
    /// <summary>
    /// Map of scopes with scope index as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.Scope> Scopes {
      get { return scopes_; }
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 6;
    private static readonly pbc::MapField<string, global::KclLib.API.Symbol>.Codec _map_symbols_codec
        = new pbc::MapField<string, global::KclLib.API.Symbol>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.Symbol.Parser), 50);
    private readonly pbc::MapField<string, global::KclLib.API.Symbol> symbols_ = new pbc::MapField<string, global::KclLib.API.Symbol>();
    /// <summary>
    /// Map of symbols with symbol index as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.Symbol> Symbols {
      get { return symbols_; }
    }

    /// <summary>Field number for the "node_symbol_map" field.</summary>
    public const int NodeSymbolMapFieldNumber = 7;
    private static readonly pbc::MapField<string, global::KclLib.API.SymbolIndex>.Codec _map_nodeSymbolMap_codec
        = new pbc::MapField<string, global::KclLib.API.SymbolIndex>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.SymbolIndex.Parser), 58);
    private readonly pbc::MapField<string, global::KclLib.API.SymbolIndex> nodeSymbolMap_ = new pbc::MapField<string, global::KclLib.API.SymbolIndex>();
    /// <summary>
    /// Map of node-symbol associations with AST index UUID as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.SymbolIndex> NodeSymbolMap {
      get { return nodeSymbolMap_; }
    }

    /// <summary>Field number for the "symbol_node_map" field.</summary>
    public const int SymbolNodeMapFieldNumber = 8;
    private static readonly pbc::MapField<string, string>.Codec _map_symbolNodeMap_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 66);
    private readonly pbc::MapField<string, string> symbolNodeMap_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of symbol-node associations with symbol index as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> SymbolNodeMap {
      get { return symbolNodeMap_; }
    }

    /// <summary>Field number for the "fully_qualified_name_map" field.</summary>
    public const int FullyQualifiedNameMapFieldNumber = 9;
    private static readonly pbc::MapField<string, global::KclLib.API.SymbolIndex>.Codec _map_fullyQualifiedNameMap_codec
        = new pbc::MapField<string, global::KclLib.API.SymbolIndex>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.SymbolIndex.Parser), 74);
    private readonly pbc::MapField<string, global::KclLib.API.SymbolIndex> fullyQualifiedNameMap_ = new pbc::MapField<string, global::KclLib.API.SymbolIndex>();
    /// <summary>
    /// Map of fully qualified names with symbol index as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.SymbolIndex> FullyQualifiedNameMap {
      get { return fullyQualifiedNameMap_; }
    }

    /// <summary>Field number for the "pkg_scope_map" field.</summary>
    public const int PkgScopeMapFieldNumber = 10;
    private static readonly pbc::MapField<string, global::KclLib.API.ScopeIndex>.Codec _map_pkgScopeMap_codec
        = new pbc::MapField<string, global::KclLib.API.ScopeIndex>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.ScopeIndex.Parser), 82);
    private readonly pbc::MapField<string, global::KclLib.API.ScopeIndex> pkgScopeMap_ = new pbc::MapField<string, global::KclLib.API.ScopeIndex>();
    /// <summary>
    /// Map of package scope with package path as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.ScopeIndex> PkgScopeMap {
      get { return pkgScopeMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadPackage_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadPackage_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Program != other.Program) return false;
      if(!paths_.Equals(other.paths_)) return false;
      if(!parseErrors_.Equals(other.parseErrors_)) return false;
      if(!typeErrors_.Equals(other.typeErrors_)) return false;
      if (!Scopes.Equals(other.Scopes)) return false;
      if (!Symbols.Equals(other.Symbols)) return false;
      if (!NodeSymbolMap.Equals(other.NodeSymbolMap)) return false;
      if (!SymbolNodeMap.Equals(other.SymbolNodeMap)) return false;
      if (!FullyQualifiedNameMap.Equals(other.FullyQualifiedNameMap)) return false;
      if (!PkgScopeMap.Equals(other.PkgScopeMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Program.Length != 0) hash ^= Program.GetHashCode();
      hash ^= paths_.GetHashCode();
      hash ^= parseErrors_.GetHashCode();
      hash ^= typeErrors_.GetHashCode();
      hash ^= Scopes.GetHashCode();
      hash ^= Symbols.GetHashCode();
      hash ^= NodeSymbolMap.GetHashCode();
      hash ^= SymbolNodeMap.GetHashCode();
      hash ^= FullyQualifiedNameMap.GetHashCode();
      hash ^= PkgScopeMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Program.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Program);
      }
      paths_.WriteTo(output, _repeated_paths_codec);
      parseErrors_.WriteTo(output, _repeated_parseErrors_codec);
      typeErrors_.WriteTo(output, _repeated_typeErrors_codec);
      scopes_.WriteTo(output, _map_scopes_codec);
      symbols_.WriteTo(output, _map_symbols_codec);
      nodeSymbolMap_.WriteTo(output, _map_nodeSymbolMap_codec);
      symbolNodeMap_.WriteTo(output, _map_symbolNodeMap_codec);
      fullyQualifiedNameMap_.WriteTo(output, _map_fullyQualifiedNameMap_codec);
      pkgScopeMap_.WriteTo(output, _map_pkgScopeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Program.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Program);
      }
      size += paths_.CalculateSize(_repeated_paths_codec);
      size += parseErrors_.CalculateSize(_repeated_parseErrors_codec);
      size += typeErrors_.CalculateSize(_repeated_typeErrors_codec);
      size += scopes_.CalculateSize(_map_scopes_codec);
      size += symbols_.CalculateSize(_map_symbols_codec);
      size += nodeSymbolMap_.CalculateSize(_map_nodeSymbolMap_codec);
      size += symbolNodeMap_.CalculateSize(_map_symbolNodeMap_codec);
      size += fullyQualifiedNameMap_.CalculateSize(_map_fullyQualifiedNameMap_codec);
      size += pkgScopeMap_.CalculateSize(_map_pkgScopeMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadPackage_Result other) {
      if (other == null) {
        return;
      }
      if (other.Program.Length != 0) {
        Program = other.Program;
      }
      paths_.Add(other.paths_);
      parseErrors_.Add(other.parseErrors_);
      typeErrors_.Add(other.typeErrors_);
      scopes_.Add(other.scopes_);
      symbols_.Add(other.symbols_);
      nodeSymbolMap_.Add(other.nodeSymbolMap_);
      symbolNodeMap_.Add(other.symbolNodeMap_);
      fullyQualifiedNameMap_.Add(other.fullyQualifiedNameMap_);
      pkgScopeMap_.Add(other.pkgScopeMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Program = input.ReadString();
            break;
          }
          case 18: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
          case 26: {
            parseErrors_.AddEntriesFrom(input, _repeated_parseErrors_codec);
            break;
          }
          case 34: {
            typeErrors_.AddEntriesFrom(input, _repeated_typeErrors_codec);
            break;
          }
          case 42: {
            scopes_.AddEntriesFrom(input, _map_scopes_codec);
            break;
          }
          case 50: {
            symbols_.AddEntriesFrom(input, _map_symbols_codec);
            break;
          }
          case 58: {
            nodeSymbolMap_.AddEntriesFrom(input, _map_nodeSymbolMap_codec);
            break;
          }
          case 66: {
            symbolNodeMap_.AddEntriesFrom(input, _map_symbolNodeMap_codec);
            break;
          }
          case 74: {
            fullyQualifiedNameMap_.AddEntriesFrom(input, _map_fullyQualifiedNameMap_codec);
            break;
          }
          case 82: {
            pkgScopeMap_.AddEntriesFrom(input, _map_pkgScopeMap_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for list options response.
  /// </summary>
  public sealed partial class ListOptions_Result : pb::IMessage<ListOptions_Result> {
    private static readonly pb::MessageParser<ListOptions_Result> _parser = new pb::MessageParser<ListOptions_Result>(() => new ListOptions_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOptions_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOptions_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOptions_Result(ListOptions_Result other) : this() {
      options_ = other.options_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOptions_Result Clone() {
      return new ListOptions_Result(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KclLib.API.OptionHelp> _repeated_options_codec
        = pb::FieldCodec.ForMessage(18, global::KclLib.API.OptionHelp.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.OptionHelp> options_ = new pbc::RepeatedField<global::KclLib.API.OptionHelp>();
    /// <summary>
    /// List of available options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.OptionHelp> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOptions_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOptions_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!options_.Equals(other.options_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= options_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      options_.WriteTo(output, _repeated_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += options_.CalculateSize(_repeated_options_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOptions_Result other) {
      if (other == null) {
        return;
      }
      options_.Add(other.options_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            options_.AddEntriesFrom(input, _repeated_options_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a help option.
  /// </summary>
  public sealed partial class OptionHelp : pb::IMessage<OptionHelp> {
    private static readonly pb::MessageParser<OptionHelp> _parser = new pb::MessageParser<OptionHelp>(() => new OptionHelp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionHelp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionHelp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionHelp(OptionHelp other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      required_ = other.required_;
      defaultValue_ = other.defaultValue_;
      help_ = other.help_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionHelp Clone() {
      return new OptionHelp(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// Type of the option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 3;
    private bool required_;
    /// <summary>
    /// Flag indicating if the option is required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Required {
      get { return required_; }
      set {
        required_ = value;
      }
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 4;
    private string defaultValue_ = "";
    /// <summary>
    /// Default value of the option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "help" field.</summary>
    public const int HelpFieldNumber = 5;
    private string help_ = "";
    /// <summary>
    /// Help text for the option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Help {
      get { return help_; }
      set {
        help_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionHelp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionHelp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Required != other.Required) return false;
      if (DefaultValue != other.DefaultValue) return false;
      if (Help != other.Help) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Required != false) hash ^= Required.GetHashCode();
      if (DefaultValue.Length != 0) hash ^= DefaultValue.GetHashCode();
      if (Help.Length != 0) hash ^= Help.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Required != false) {
        output.WriteRawTag(24);
        output.WriteBool(Required);
      }
      if (DefaultValue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DefaultValue);
      }
      if (Help.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Help);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Required != false) {
        size += 1 + 1;
      }
      if (DefaultValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultValue);
      }
      if (Help.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Help);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionHelp other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Required != false) {
        Required = other.Required;
      }
      if (other.DefaultValue.Length != 0) {
        DefaultValue = other.DefaultValue;
      }
      if (other.Help.Length != 0) {
        Help = other.Help;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            Required = input.ReadBool();
            break;
          }
          case 34: {
            DefaultValue = input.ReadString();
            break;
          }
          case 42: {
            Help = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a symbol in KCL.
  /// </summary>
  public sealed partial class Symbol : pb::IMessage<Symbol> {
    private static readonly pb::MessageParser<Symbol> _parser = new pb::MessageParser<Symbol>(() => new Symbol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Symbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol(Symbol other) : this() {
      ty_ = other.ty_ != null ? other.ty_.Clone() : null;
      name_ = other.name_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      def_ = other.def_ != null ? other.def_.Clone() : null;
      attrs_ = other.attrs_.Clone();
      isGlobal_ = other.isGlobal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol Clone() {
      return new Symbol(this);
    }

    /// <summary>Field number for the "ty" field.</summary>
    public const int TyFieldNumber = 1;
    private global::KclLib.API.KclType ty_;
    /// <summary>
    /// Type of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.KclType Ty {
      get { return ty_; }
      set {
        ty_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private global::KclLib.API.SymbolIndex owner_;
    /// <summary>
    /// Owner of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.SymbolIndex Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "def" field.</summary>
    public const int DefFieldNumber = 4;
    private global::KclLib.API.SymbolIndex def_;
    /// <summary>
    /// Definition of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.SymbolIndex Def {
      get { return def_; }
      set {
        def_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::KclLib.API.SymbolIndex> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(42, global::KclLib.API.SymbolIndex.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.SymbolIndex> attrs_ = new pbc::RepeatedField<global::KclLib.API.SymbolIndex>();
    /// <summary>
    /// Attributes of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.SymbolIndex> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "is_global" field.</summary>
    public const int IsGlobalFieldNumber = 6;
    private bool isGlobal_;
    /// <summary>
    /// Flag indicating if the symbol is global.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGlobal {
      get { return isGlobal_; }
      set {
        isGlobal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Symbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Symbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ty, other.Ty)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Def, other.Def)) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if (IsGlobal != other.IsGlobal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ty_ != null) hash ^= Ty.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (def_ != null) hash ^= Def.GetHashCode();
      hash ^= attrs_.GetHashCode();
      if (IsGlobal != false) hash ^= IsGlobal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ty_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ty);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (owner_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Owner);
      }
      if (def_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Def);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (IsGlobal != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsGlobal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ty);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (def_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Def);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (IsGlobal != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Symbol other) {
      if (other == null) {
        return;
      }
      if (other.ty_ != null) {
        if (ty_ == null) {
          Ty = new global::KclLib.API.KclType();
        }
        Ty.MergeFrom(other.Ty);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::KclLib.API.SymbolIndex();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.def_ != null) {
        if (def_ == null) {
          Def = new global::KclLib.API.SymbolIndex();
        }
        Def.MergeFrom(other.Def);
      }
      attrs_.Add(other.attrs_);
      if (other.IsGlobal != false) {
        IsGlobal = other.IsGlobal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ty_ == null) {
              Ty = new global::KclLib.API.KclType();
            }
            input.ReadMessage(Ty);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (owner_ == null) {
              Owner = new global::KclLib.API.SymbolIndex();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 34: {
            if (def_ == null) {
              Def = new global::KclLib.API.SymbolIndex();
            }
            input.ReadMessage(Def);
            break;
          }
          case 42: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 48: {
            IsGlobal = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a scope in KCL.
  /// </summary>
  public sealed partial class Scope : pb::IMessage<Scope> {
    private static readonly pb::MessageParser<Scope> _parser = new pb::MessageParser<Scope>(() => new Scope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scope(Scope other) : this() {
      kind_ = other.kind_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      children_ = other.children_.Clone();
      defs_ = other.defs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scope Clone() {
      return new Scope(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private string kind_ = "";
    /// <summary>
    /// Type of the scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 2;
    private global::KclLib.API.ScopeIndex parent_;
    /// <summary>
    /// Parent scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.ScopeIndex Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private global::KclLib.API.SymbolIndex owner_;
    /// <summary>
    /// Owner of the scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.SymbolIndex Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 4;
    private static readonly pb::FieldCodec<global::KclLib.API.ScopeIndex> _repeated_children_codec
        = pb::FieldCodec.ForMessage(34, global::KclLib.API.ScopeIndex.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.ScopeIndex> children_ = new pbc::RepeatedField<global::KclLib.API.ScopeIndex>();
    /// <summary>
    /// Children of the scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.ScopeIndex> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "defs" field.</summary>
    public const int DefsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::KclLib.API.SymbolIndex> _repeated_defs_codec
        = pb::FieldCodec.ForMessage(42, global::KclLib.API.SymbolIndex.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.SymbolIndex> defs_ = new pbc::RepeatedField<global::KclLib.API.SymbolIndex>();
    /// <summary>
    /// Definitions in the scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.SymbolIndex> Defs {
      get { return defs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if(!children_.Equals(other.children_)) return false;
      if(!defs_.Equals(other.defs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      hash ^= children_.GetHashCode();
      hash ^= defs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (parent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parent);
      }
      if (owner_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Owner);
      }
      children_.WriteTo(output, _repeated_children_codec);
      defs_.WriteTo(output, _repeated_defs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      size += defs_.CalculateSize(_repeated_defs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scope other) {
      if (other == null) {
        return;
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::KclLib.API.ScopeIndex();
        }
        Parent.MergeFrom(other.Parent);
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::KclLib.API.SymbolIndex();
        }
        Owner.MergeFrom(other.Owner);
      }
      children_.Add(other.children_);
      defs_.Add(other.defs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 18: {
            if (parent_ == null) {
              Parent = new global::KclLib.API.ScopeIndex();
            }
            input.ReadMessage(Parent);
            break;
          }
          case 26: {
            if (owner_ == null) {
              Owner = new global::KclLib.API.SymbolIndex();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 34: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 42: {
            defs_.AddEntriesFrom(input, _repeated_defs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a symbol index.
  /// </summary>
  public sealed partial class SymbolIndex : pb::IMessage<SymbolIndex> {
    private static readonly pb::MessageParser<SymbolIndex> _parser = new pb::MessageParser<SymbolIndex>(() => new SymbolIndex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolIndex(SymbolIndex other) : this() {
      i_ = other.i_;
      g_ = other.g_;
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolIndex Clone() {
      return new SymbolIndex(this);
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private ulong i_;
    /// <summary>
    /// Index identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong I {
      get { return i_; }
      set {
        i_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private ulong g_;
    /// <summary>
    /// Global identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private string kind_ = "";
    /// <summary>
    /// Type of the symbol or scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (I != other.I) return false;
      if (G != other.G) return false;
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (I != 0UL) hash ^= I.GetHashCode();
      if (G != 0UL) hash ^= G.GetHashCode();
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(I);
      }
      if (G != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(G);
      }
      if (Kind.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (I != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(I);
      }
      if (G != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(G);
      }
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolIndex other) {
      if (other == null) {
        return;
      }
      if (other.I != 0UL) {
        I = other.I;
      }
      if (other.G != 0UL) {
        G = other.G;
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            I = input.ReadUInt64();
            break;
          }
          case 16: {
            G = input.ReadUInt64();
            break;
          }
          case 26: {
            Kind = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a scope index.
  /// </summary>
  public sealed partial class ScopeIndex : pb::IMessage<ScopeIndex> {
    private static readonly pb::MessageParser<ScopeIndex> _parser = new pb::MessageParser<ScopeIndex>(() => new ScopeIndex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScopeIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeIndex(ScopeIndex other) : this() {
      i_ = other.i_;
      g_ = other.g_;
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeIndex Clone() {
      return new ScopeIndex(this);
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private ulong i_;
    /// <summary>
    /// Index identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong I {
      get { return i_; }
      set {
        i_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private ulong g_;
    /// <summary>
    /// Global identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private string kind_ = "";
    /// <summary>
    /// Type of the scope.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScopeIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScopeIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (I != other.I) return false;
      if (G != other.G) return false;
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (I != 0UL) hash ^= I.GetHashCode();
      if (G != 0UL) hash ^= G.GetHashCode();
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(I);
      }
      if (G != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(G);
      }
      if (Kind.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (I != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(I);
      }
      if (G != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(G);
      }
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScopeIndex other) {
      if (other == null) {
        return;
      }
      if (other.I != 0UL) {
        I = other.I;
      }
      if (other.G != 0UL) {
        G = other.G;
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            I = input.ReadUInt64();
            break;
          }
          case 16: {
            G = input.ReadUInt64();
            break;
          }
          case 26: {
            Kind = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for execute program request arguments.
  /// </summary>
  public sealed partial class ExecProgram_Args : pb::IMessage<ExecProgram_Args> {
    private static readonly pb::MessageParser<ExecProgram_Args> _parser = new pb::MessageParser<ExecProgram_Args>(() => new ExecProgram_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecProgram_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProgram_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProgram_Args(ExecProgram_Args other) : this() {
      workDir_ = other.workDir_;
      kFilenameList_ = other.kFilenameList_.Clone();
      kCodeList_ = other.kCodeList_.Clone();
      args_ = other.args_.Clone();
      overrides_ = other.overrides_.Clone();
      disableYamlResult_ = other.disableYamlResult_;
      printOverrideAst_ = other.printOverrideAst_;
      strictRangeCheck_ = other.strictRangeCheck_;
      disableNone_ = other.disableNone_;
      verbose_ = other.verbose_;
      debug_ = other.debug_;
      sortKeys_ = other.sortKeys_;
      externalPkgs_ = other.externalPkgs_.Clone();
      includeSchemaTypePath_ = other.includeSchemaTypePath_;
      compileOnly_ = other.compileOnly_;
      showHidden_ = other.showHidden_;
      pathSelector_ = other.pathSelector_.Clone();
      fastEval_ = other.fastEval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProgram_Args Clone() {
      return new ExecProgram_Args(this);
    }

    /// <summary>Field number for the "work_dir" field.</summary>
    public const int WorkDirFieldNumber = 1;
    private string workDir_ = "";
    /// <summary>
    /// Working directory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkDir {
      get { return workDir_; }
      set {
        workDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "k_filename_list" field.</summary>
    public const int KFilenameListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_kFilenameList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> kFilenameList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of KCL filenames.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KFilenameList {
      get { return kFilenameList_; }
    }

    /// <summary>Field number for the "k_code_list" field.</summary>
    public const int KCodeListFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_kCodeList_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> kCodeList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of KCL codes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KCodeList {
      get { return kCodeList_; }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::KclLib.API.Argument> _repeated_args_codec
        = pb::FieldCodec.ForMessage(34, global::KclLib.API.Argument.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Argument> args_ = new pbc::RepeatedField<global::KclLib.API.Argument>();
    /// <summary>
    /// Arguments for the program.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Argument> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "overrides" field.</summary>
    public const int OverridesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_overrides_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> overrides_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Override configurations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Overrides {
      get { return overrides_; }
    }

    /// <summary>Field number for the "disable_yaml_result" field.</summary>
    public const int DisableYamlResultFieldNumber = 6;
    private bool disableYamlResult_;
    /// <summary>
    /// Flag to disable YAML result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableYamlResult {
      get { return disableYamlResult_; }
      set {
        disableYamlResult_ = value;
      }
    }

    /// <summary>Field number for the "print_override_ast" field.</summary>
    public const int PrintOverrideAstFieldNumber = 7;
    private bool printOverrideAst_;
    /// <summary>
    /// Flag to print override AST.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrintOverrideAst {
      get { return printOverrideAst_; }
      set {
        printOverrideAst_ = value;
      }
    }

    /// <summary>Field number for the "strict_range_check" field.</summary>
    public const int StrictRangeCheckFieldNumber = 8;
    private bool strictRangeCheck_;
    /// <summary>
    /// Flag for strict range check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StrictRangeCheck {
      get { return strictRangeCheck_; }
      set {
        strictRangeCheck_ = value;
      }
    }

    /// <summary>Field number for the "disable_none" field.</summary>
    public const int DisableNoneFieldNumber = 9;
    private bool disableNone_;
    /// <summary>
    /// Flag to disable none values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableNone {
      get { return disableNone_; }
      set {
        disableNone_ = value;
      }
    }

    /// <summary>Field number for the "verbose" field.</summary>
    public const int VerboseFieldNumber = 10;
    private int verbose_;
    /// <summary>
    /// Verbose level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Verbose {
      get { return verbose_; }
      set {
        verbose_ = value;
      }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 11;
    private int debug_;
    /// <summary>
    /// Debug level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    /// <summary>Field number for the "sort_keys" field.</summary>
    public const int SortKeysFieldNumber = 12;
    private bool sortKeys_;
    /// <summary>
    /// Flag to sort keys in YAML/JSON results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SortKeys {
      get { return sortKeys_; }
      set {
        sortKeys_ = value;
      }
    }

    /// <summary>Field number for the "external_pkgs" field.</summary>
    public const int ExternalPkgsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::KclLib.API.ExternalPkg> _repeated_externalPkgs_codec
        = pb::FieldCodec.ForMessage(106, global::KclLib.API.ExternalPkg.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.ExternalPkg> externalPkgs_ = new pbc::RepeatedField<global::KclLib.API.ExternalPkg>();
    /// <summary>
    /// External packages path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.ExternalPkg> ExternalPkgs {
      get { return externalPkgs_; }
    }

    /// <summary>Field number for the "include_schema_type_path" field.</summary>
    public const int IncludeSchemaTypePathFieldNumber = 14;
    private bool includeSchemaTypePath_;
    /// <summary>
    /// Flag to include schema type path in results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeSchemaTypePath {
      get { return includeSchemaTypePath_; }
      set {
        includeSchemaTypePath_ = value;
      }
    }

    /// <summary>Field number for the "compile_only" field.</summary>
    public const int CompileOnlyFieldNumber = 15;
    private bool compileOnly_;
    /// <summary>
    /// Flag to compile only without execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompileOnly {
      get { return compileOnly_; }
      set {
        compileOnly_ = value;
      }
    }

    /// <summary>Field number for the "show_hidden" field.</summary>
    public const int ShowHiddenFieldNumber = 16;
    private bool showHidden_;
    /// <summary>
    /// Flag to show hidden attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowHidden {
      get { return showHidden_; }
      set {
        showHidden_ = value;
      }
    }

    /// <summary>Field number for the "path_selector" field.</summary>
    public const int PathSelectorFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_pathSelector_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> pathSelector_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Path selectors for results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PathSelector {
      get { return pathSelector_; }
    }

    /// <summary>Field number for the "fast_eval" field.</summary>
    public const int FastEvalFieldNumber = 18;
    private bool fastEval_;
    /// <summary>
    /// Flag for fast evaluation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FastEval {
      get { return fastEval_; }
      set {
        fastEval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecProgram_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecProgram_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkDir != other.WorkDir) return false;
      if(!kFilenameList_.Equals(other.kFilenameList_)) return false;
      if(!kCodeList_.Equals(other.kCodeList_)) return false;
      if(!args_.Equals(other.args_)) return false;
      if(!overrides_.Equals(other.overrides_)) return false;
      if (DisableYamlResult != other.DisableYamlResult) return false;
      if (PrintOverrideAst != other.PrintOverrideAst) return false;
      if (StrictRangeCheck != other.StrictRangeCheck) return false;
      if (DisableNone != other.DisableNone) return false;
      if (Verbose != other.Verbose) return false;
      if (Debug != other.Debug) return false;
      if (SortKeys != other.SortKeys) return false;
      if(!externalPkgs_.Equals(other.externalPkgs_)) return false;
      if (IncludeSchemaTypePath != other.IncludeSchemaTypePath) return false;
      if (CompileOnly != other.CompileOnly) return false;
      if (ShowHidden != other.ShowHidden) return false;
      if(!pathSelector_.Equals(other.pathSelector_)) return false;
      if (FastEval != other.FastEval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkDir.Length != 0) hash ^= WorkDir.GetHashCode();
      hash ^= kFilenameList_.GetHashCode();
      hash ^= kCodeList_.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= overrides_.GetHashCode();
      if (DisableYamlResult != false) hash ^= DisableYamlResult.GetHashCode();
      if (PrintOverrideAst != false) hash ^= PrintOverrideAst.GetHashCode();
      if (StrictRangeCheck != false) hash ^= StrictRangeCheck.GetHashCode();
      if (DisableNone != false) hash ^= DisableNone.GetHashCode();
      if (Verbose != 0) hash ^= Verbose.GetHashCode();
      if (Debug != 0) hash ^= Debug.GetHashCode();
      if (SortKeys != false) hash ^= SortKeys.GetHashCode();
      hash ^= externalPkgs_.GetHashCode();
      if (IncludeSchemaTypePath != false) hash ^= IncludeSchemaTypePath.GetHashCode();
      if (CompileOnly != false) hash ^= CompileOnly.GetHashCode();
      if (ShowHidden != false) hash ^= ShowHidden.GetHashCode();
      hash ^= pathSelector_.GetHashCode();
      if (FastEval != false) hash ^= FastEval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkDir.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkDir);
      }
      kFilenameList_.WriteTo(output, _repeated_kFilenameList_codec);
      kCodeList_.WriteTo(output, _repeated_kCodeList_codec);
      args_.WriteTo(output, _repeated_args_codec);
      overrides_.WriteTo(output, _repeated_overrides_codec);
      if (DisableYamlResult != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableYamlResult);
      }
      if (PrintOverrideAst != false) {
        output.WriteRawTag(56);
        output.WriteBool(PrintOverrideAst);
      }
      if (StrictRangeCheck != false) {
        output.WriteRawTag(64);
        output.WriteBool(StrictRangeCheck);
      }
      if (DisableNone != false) {
        output.WriteRawTag(72);
        output.WriteBool(DisableNone);
      }
      if (Verbose != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Verbose);
      }
      if (Debug != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Debug);
      }
      if (SortKeys != false) {
        output.WriteRawTag(96);
        output.WriteBool(SortKeys);
      }
      externalPkgs_.WriteTo(output, _repeated_externalPkgs_codec);
      if (IncludeSchemaTypePath != false) {
        output.WriteRawTag(112);
        output.WriteBool(IncludeSchemaTypePath);
      }
      if (CompileOnly != false) {
        output.WriteRawTag(120);
        output.WriteBool(CompileOnly);
      }
      if (ShowHidden != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(ShowHidden);
      }
      pathSelector_.WriteTo(output, _repeated_pathSelector_codec);
      if (FastEval != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(FastEval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkDir);
      }
      size += kFilenameList_.CalculateSize(_repeated_kFilenameList_codec);
      size += kCodeList_.CalculateSize(_repeated_kCodeList_codec);
      size += args_.CalculateSize(_repeated_args_codec);
      size += overrides_.CalculateSize(_repeated_overrides_codec);
      if (DisableYamlResult != false) {
        size += 1 + 1;
      }
      if (PrintOverrideAst != false) {
        size += 1 + 1;
      }
      if (StrictRangeCheck != false) {
        size += 1 + 1;
      }
      if (DisableNone != false) {
        size += 1 + 1;
      }
      if (Verbose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Verbose);
      }
      if (Debug != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Debug);
      }
      if (SortKeys != false) {
        size += 1 + 1;
      }
      size += externalPkgs_.CalculateSize(_repeated_externalPkgs_codec);
      if (IncludeSchemaTypePath != false) {
        size += 1 + 1;
      }
      if (CompileOnly != false) {
        size += 1 + 1;
      }
      if (ShowHidden != false) {
        size += 2 + 1;
      }
      size += pathSelector_.CalculateSize(_repeated_pathSelector_codec);
      if (FastEval != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecProgram_Args other) {
      if (other == null) {
        return;
      }
      if (other.WorkDir.Length != 0) {
        WorkDir = other.WorkDir;
      }
      kFilenameList_.Add(other.kFilenameList_);
      kCodeList_.Add(other.kCodeList_);
      args_.Add(other.args_);
      overrides_.Add(other.overrides_);
      if (other.DisableYamlResult != false) {
        DisableYamlResult = other.DisableYamlResult;
      }
      if (other.PrintOverrideAst != false) {
        PrintOverrideAst = other.PrintOverrideAst;
      }
      if (other.StrictRangeCheck != false) {
        StrictRangeCheck = other.StrictRangeCheck;
      }
      if (other.DisableNone != false) {
        DisableNone = other.DisableNone;
      }
      if (other.Verbose != 0) {
        Verbose = other.Verbose;
      }
      if (other.Debug != 0) {
        Debug = other.Debug;
      }
      if (other.SortKeys != false) {
        SortKeys = other.SortKeys;
      }
      externalPkgs_.Add(other.externalPkgs_);
      if (other.IncludeSchemaTypePath != false) {
        IncludeSchemaTypePath = other.IncludeSchemaTypePath;
      }
      if (other.CompileOnly != false) {
        CompileOnly = other.CompileOnly;
      }
      if (other.ShowHidden != false) {
        ShowHidden = other.ShowHidden;
      }
      pathSelector_.Add(other.pathSelector_);
      if (other.FastEval != false) {
        FastEval = other.FastEval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WorkDir = input.ReadString();
            break;
          }
          case 18: {
            kFilenameList_.AddEntriesFrom(input, _repeated_kFilenameList_codec);
            break;
          }
          case 26: {
            kCodeList_.AddEntriesFrom(input, _repeated_kCodeList_codec);
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 42: {
            overrides_.AddEntriesFrom(input, _repeated_overrides_codec);
            break;
          }
          case 48: {
            DisableYamlResult = input.ReadBool();
            break;
          }
          case 56: {
            PrintOverrideAst = input.ReadBool();
            break;
          }
          case 64: {
            StrictRangeCheck = input.ReadBool();
            break;
          }
          case 72: {
            DisableNone = input.ReadBool();
            break;
          }
          case 80: {
            Verbose = input.ReadInt32();
            break;
          }
          case 88: {
            Debug = input.ReadInt32();
            break;
          }
          case 96: {
            SortKeys = input.ReadBool();
            break;
          }
          case 106: {
            externalPkgs_.AddEntriesFrom(input, _repeated_externalPkgs_codec);
            break;
          }
          case 112: {
            IncludeSchemaTypePath = input.ReadBool();
            break;
          }
          case 120: {
            CompileOnly = input.ReadBool();
            break;
          }
          case 128: {
            ShowHidden = input.ReadBool();
            break;
          }
          case 138: {
            pathSelector_.AddEntriesFrom(input, _repeated_pathSelector_codec);
            break;
          }
          case 144: {
            FastEval = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for execute program response.
  /// </summary>
  public sealed partial class ExecProgram_Result : pb::IMessage<ExecProgram_Result> {
    private static readonly pb::MessageParser<ExecProgram_Result> _parser = new pb::MessageParser<ExecProgram_Result>(() => new ExecProgram_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecProgram_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProgram_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProgram_Result(ExecProgram_Result other) : this() {
      jsonResult_ = other.jsonResult_;
      yamlResult_ = other.yamlResult_;
      logMessage_ = other.logMessage_;
      errMessage_ = other.errMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecProgram_Result Clone() {
      return new ExecProgram_Result(this);
    }

    /// <summary>Field number for the "json_result" field.</summary>
    public const int JsonResultFieldNumber = 1;
    private string jsonResult_ = "";
    /// <summary>
    /// Result in JSON format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonResult {
      get { return jsonResult_; }
      set {
        jsonResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "yaml_result" field.</summary>
    public const int YamlResultFieldNumber = 2;
    private string yamlResult_ = "";
    /// <summary>
    /// Result in YAML format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string YamlResult {
      get { return yamlResult_; }
      set {
        yamlResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log_message" field.</summary>
    public const int LogMessageFieldNumber = 3;
    private string logMessage_ = "";
    /// <summary>
    /// Log message from execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogMessage {
      get { return logMessage_; }
      set {
        logMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "err_message" field.</summary>
    public const int ErrMessageFieldNumber = 4;
    private string errMessage_ = "";
    /// <summary>
    /// Error message from execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMessage {
      get { return errMessage_; }
      set {
        errMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecProgram_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecProgram_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JsonResult != other.JsonResult) return false;
      if (YamlResult != other.YamlResult) return false;
      if (LogMessage != other.LogMessage) return false;
      if (ErrMessage != other.ErrMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JsonResult.Length != 0) hash ^= JsonResult.GetHashCode();
      if (YamlResult.Length != 0) hash ^= YamlResult.GetHashCode();
      if (LogMessage.Length != 0) hash ^= LogMessage.GetHashCode();
      if (ErrMessage.Length != 0) hash ^= ErrMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JsonResult.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JsonResult);
      }
      if (YamlResult.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(YamlResult);
      }
      if (LogMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LogMessage);
      }
      if (ErrMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JsonResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonResult);
      }
      if (YamlResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(YamlResult);
      }
      if (LogMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogMessage);
      }
      if (ErrMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecProgram_Result other) {
      if (other == null) {
        return;
      }
      if (other.JsonResult.Length != 0) {
        JsonResult = other.JsonResult;
      }
      if (other.YamlResult.Length != 0) {
        YamlResult = other.YamlResult;
      }
      if (other.LogMessage.Length != 0) {
        LogMessage = other.LogMessage;
      }
      if (other.ErrMessage.Length != 0) {
        ErrMessage = other.ErrMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            JsonResult = input.ReadString();
            break;
          }
          case 18: {
            YamlResult = input.ReadString();
            break;
          }
          case 26: {
            LogMessage = input.ReadString();
            break;
          }
          case 34: {
            ErrMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for build program request arguments.
  /// </summary>
  public sealed partial class BuildProgram_Args : pb::IMessage<BuildProgram_Args> {
    private static readonly pb::MessageParser<BuildProgram_Args> _parser = new pb::MessageParser<BuildProgram_Args>(() => new BuildProgram_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildProgram_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProgram_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProgram_Args(BuildProgram_Args other) : this() {
      execArgs_ = other.execArgs_ != null ? other.execArgs_.Clone() : null;
      output_ = other.output_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProgram_Args Clone() {
      return new BuildProgram_Args(this);
    }

    /// <summary>Field number for the "exec_args" field.</summary>
    public const int ExecArgsFieldNumber = 1;
    private global::KclLib.API.ExecProgram_Args execArgs_;
    /// <summary>
    /// Arguments for executing the program.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.ExecProgram_Args ExecArgs {
      get { return execArgs_; }
      set {
        execArgs_ = value;
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 2;
    private string output_ = "";
    /// <summary>
    /// Output path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output {
      get { return output_; }
      set {
        output_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildProgram_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildProgram_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExecArgs, other.ExecArgs)) return false;
      if (Output != other.Output) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (execArgs_ != null) hash ^= ExecArgs.GetHashCode();
      if (Output.Length != 0) hash ^= Output.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (execArgs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExecArgs);
      }
      if (Output.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (execArgs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecArgs);
      }
      if (Output.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildProgram_Args other) {
      if (other == null) {
        return;
      }
      if (other.execArgs_ != null) {
        if (execArgs_ == null) {
          ExecArgs = new global::KclLib.API.ExecProgram_Args();
        }
        ExecArgs.MergeFrom(other.ExecArgs);
      }
      if (other.Output.Length != 0) {
        Output = other.Output;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (execArgs_ == null) {
              ExecArgs = new global::KclLib.API.ExecProgram_Args();
            }
            input.ReadMessage(ExecArgs);
            break;
          }
          case 18: {
            Output = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for build program response.
  /// </summary>
  public sealed partial class BuildProgram_Result : pb::IMessage<BuildProgram_Result> {
    private static readonly pb::MessageParser<BuildProgram_Result> _parser = new pb::MessageParser<BuildProgram_Result>(() => new BuildProgram_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildProgram_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProgram_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProgram_Result(BuildProgram_Result other) : this() {
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildProgram_Result Clone() {
      return new BuildProgram_Result(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// Path of the built program.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildProgram_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildProgram_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildProgram_Result other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for execute artifact request arguments.
  /// </summary>
  public sealed partial class ExecArtifact_Args : pb::IMessage<ExecArtifact_Args> {
    private static readonly pb::MessageParser<ExecArtifact_Args> _parser = new pb::MessageParser<ExecArtifact_Args>(() => new ExecArtifact_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecArtifact_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecArtifact_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecArtifact_Args(ExecArtifact_Args other) : this() {
      path_ = other.path_;
      execArgs_ = other.execArgs_ != null ? other.execArgs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecArtifact_Args Clone() {
      return new ExecArtifact_Args(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// Path of the artifact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_args" field.</summary>
    public const int ExecArgsFieldNumber = 2;
    private global::KclLib.API.ExecProgram_Args execArgs_;
    /// <summary>
    /// Arguments for executing the program.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.ExecProgram_Args ExecArgs {
      get { return execArgs_; }
      set {
        execArgs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecArtifact_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecArtifact_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (!object.Equals(ExecArgs, other.ExecArgs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (execArgs_ != null) hash ^= ExecArgs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (execArgs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExecArgs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (execArgs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecArgs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecArtifact_Args other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.execArgs_ != null) {
        if (execArgs_ == null) {
          ExecArgs = new global::KclLib.API.ExecProgram_Args();
        }
        ExecArgs.MergeFrom(other.ExecArgs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            if (execArgs_ == null) {
              ExecArgs = new global::KclLib.API.ExecProgram_Args();
            }
            input.ReadMessage(ExecArgs);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for format code request arguments.
  /// </summary>
  public sealed partial class FormatCode_Args : pb::IMessage<FormatCode_Args> {
    private static readonly pb::MessageParser<FormatCode_Args> _parser = new pb::MessageParser<FormatCode_Args>(() => new FormatCode_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormatCode_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatCode_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatCode_Args(FormatCode_Args other) : this() {
      source_ = other.source_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatCode_Args Clone() {
      return new FormatCode_Args(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Source code to be formatted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormatCode_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormatCode_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormatCode_Args other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for format code response.
  /// </summary>
  public sealed partial class FormatCode_Result : pb::IMessage<FormatCode_Result> {
    private static readonly pb::MessageParser<FormatCode_Result> _parser = new pb::MessageParser<FormatCode_Result>(() => new FormatCode_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormatCode_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatCode_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatCode_Result(FormatCode_Result other) : this() {
      formatted_ = other.formatted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatCode_Result Clone() {
      return new FormatCode_Result(this);
    }

    /// <summary>Field number for the "formatted" field.</summary>
    public const int FormattedFieldNumber = 1;
    private pb::ByteString formatted_ = pb::ByteString.Empty;
    /// <summary>
    /// Formatted code as bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Formatted {
      get { return formatted_; }
      set {
        formatted_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormatCode_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormatCode_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Formatted != other.Formatted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Formatted.Length != 0) hash ^= Formatted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Formatted.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Formatted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Formatted.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Formatted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormatCode_Result other) {
      if (other == null) {
        return;
      }
      if (other.Formatted.Length != 0) {
        Formatted = other.Formatted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Formatted = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for format file path request arguments.
  /// </summary>
  public sealed partial class FormatPath_Args : pb::IMessage<FormatPath_Args> {
    private static readonly pb::MessageParser<FormatPath_Args> _parser = new pb::MessageParser<FormatPath_Args>(() => new FormatPath_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormatPath_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatPath_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatPath_Args(FormatPath_Args other) : this() {
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatPath_Args Clone() {
      return new FormatPath_Args(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// Path of the file to format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormatPath_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormatPath_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormatPath_Args other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for format file path response.
  /// </summary>
  public sealed partial class FormatPath_Result : pb::IMessage<FormatPath_Result> {
    private static readonly pb::MessageParser<FormatPath_Result> _parser = new pb::MessageParser<FormatPath_Result>(() => new FormatPath_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormatPath_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatPath_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatPath_Result(FormatPath_Result other) : this() {
      changedPaths_ = other.changedPaths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatPath_Result Clone() {
      return new FormatPath_Result(this);
    }

    /// <summary>Field number for the "changed_paths" field.</summary>
    public const int ChangedPathsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_changedPaths_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> changedPaths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of changed file paths.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChangedPaths {
      get { return changedPaths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormatPath_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormatPath_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changedPaths_.Equals(other.changedPaths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changedPaths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changedPaths_.WriteTo(output, _repeated_changedPaths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changedPaths_.CalculateSize(_repeated_changedPaths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormatPath_Result other) {
      if (other == null) {
        return;
      }
      changedPaths_.Add(other.changedPaths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            changedPaths_.AddEntriesFrom(input, _repeated_changedPaths_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for lint file path request arguments.
  /// </summary>
  public sealed partial class LintPath_Args : pb::IMessage<LintPath_Args> {
    private static readonly pb::MessageParser<LintPath_Args> _parser = new pb::MessageParser<LintPath_Args>(() => new LintPath_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LintPath_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LintPath_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LintPath_Args(LintPath_Args other) : this() {
      paths_ = other.paths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LintPath_Args Clone() {
      return new LintPath_Args(this);
    }

    /// <summary>Field number for the "paths" field.</summary>
    public const int PathsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_paths_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> paths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Paths of the files to lint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Paths {
      get { return paths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LintPath_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LintPath_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!paths_.Equals(other.paths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= paths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paths_.WriteTo(output, _repeated_paths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paths_.CalculateSize(_repeated_paths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LintPath_Args other) {
      if (other == null) {
        return;
      }
      paths_.Add(other.paths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            paths_.AddEntriesFrom(input, _repeated_paths_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for lint file path response.
  /// </summary>
  public sealed partial class LintPath_Result : pb::IMessage<LintPath_Result> {
    private static readonly pb::MessageParser<LintPath_Result> _parser = new pb::MessageParser<LintPath_Result>(() => new LintPath_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LintPath_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LintPath_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LintPath_Result(LintPath_Result other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LintPath_Result Clone() {
      return new LintPath_Result(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_results_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> results_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of lint results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LintPath_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LintPath_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LintPath_Result other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for override file request arguments.
  /// </summary>
  public sealed partial class OverrideFile_Args : pb::IMessage<OverrideFile_Args> {
    private static readonly pb::MessageParser<OverrideFile_Args> _parser = new pb::MessageParser<OverrideFile_Args>(() => new OverrideFile_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverrideFile_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverrideFile_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverrideFile_Args(OverrideFile_Args other) : this() {
      file_ = other.file_;
      specs_ = other.specs_.Clone();
      importPaths_ = other.importPaths_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverrideFile_Args Clone() {
      return new OverrideFile_Args(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private string file_ = "";
    /// <summary>
    /// Path of the file to override.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specs" field.</summary>
    public const int SpecsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_specs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> specs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of override specifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Specs {
      get { return specs_; }
    }

    /// <summary>Field number for the "import_paths" field.</summary>
    public const int ImportPathsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_importPaths_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> importPaths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of import paths.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ImportPaths {
      get { return importPaths_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverrideFile_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverrideFile_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (File != other.File) return false;
      if(!specs_.Equals(other.specs_)) return false;
      if(!importPaths_.Equals(other.importPaths_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (File.Length != 0) hash ^= File.GetHashCode();
      hash ^= specs_.GetHashCode();
      hash ^= importPaths_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (File.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(File);
      }
      specs_.WriteTo(output, _repeated_specs_codec);
      importPaths_.WriteTo(output, _repeated_importPaths_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      size += specs_.CalculateSize(_repeated_specs_codec);
      size += importPaths_.CalculateSize(_repeated_importPaths_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverrideFile_Args other) {
      if (other == null) {
        return;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      specs_.Add(other.specs_);
      importPaths_.Add(other.importPaths_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            File = input.ReadString();
            break;
          }
          case 18: {
            specs_.AddEntriesFrom(input, _repeated_specs_codec);
            break;
          }
          case 26: {
            importPaths_.AddEntriesFrom(input, _repeated_importPaths_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for override file response.
  /// </summary>
  public sealed partial class OverrideFile_Result : pb::IMessage<OverrideFile_Result> {
    private static readonly pb::MessageParser<OverrideFile_Result> _parser = new pb::MessageParser<OverrideFile_Result>(() => new OverrideFile_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OverrideFile_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverrideFile_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverrideFile_Result(OverrideFile_Result other) : this() {
      result_ = other.result_;
      parseErrors_ = other.parseErrors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OverrideFile_Result Clone() {
      return new OverrideFile_Result(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    /// <summary>
    /// Result of the override operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "parse_errors" field.</summary>
    public const int ParseErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KclLib.API.Error> _repeated_parseErrors_codec
        = pb::FieldCodec.ForMessage(18, global::KclLib.API.Error.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Error> parseErrors_ = new pbc::RepeatedField<global::KclLib.API.Error>();
    /// <summary>
    /// List of parse errors encountered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Error> ParseErrors {
      get { return parseErrors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OverrideFile_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OverrideFile_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!parseErrors_.Equals(other.parseErrors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      hash ^= parseErrors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      parseErrors_.WriteTo(output, _repeated_parseErrors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      size += parseErrors_.CalculateSize(_repeated_parseErrors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OverrideFile_Result other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      parseErrors_.Add(other.parseErrors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            parseErrors_.AddEntriesFrom(input, _repeated_parseErrors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for list variables options.
  /// </summary>
  public sealed partial class ListVariables_Options : pb::IMessage<ListVariables_Options> {
    private static readonly pb::MessageParser<ListVariables_Options> _parser = new pb::MessageParser<ListVariables_Options>(() => new ListVariables_Options());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListVariables_Options> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Options() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Options(ListVariables_Options other) : this() {
      mergeProgram_ = other.mergeProgram_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Options Clone() {
      return new ListVariables_Options(this);
    }

    /// <summary>Field number for the "merge_program" field.</summary>
    public const int MergeProgramFieldNumber = 1;
    private bool mergeProgram_;
    /// <summary>
    /// Flag to merge program configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MergeProgram {
      get { return mergeProgram_; }
      set {
        mergeProgram_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListVariables_Options);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListVariables_Options other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MergeProgram != other.MergeProgram) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MergeProgram != false) hash ^= MergeProgram.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MergeProgram != false) {
        output.WriteRawTag(8);
        output.WriteBool(MergeProgram);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MergeProgram != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListVariables_Options other) {
      if (other == null) {
        return;
      }
      if (other.MergeProgram != false) {
        MergeProgram = other.MergeProgram;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MergeProgram = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a list of variables.
  /// </summary>
  public sealed partial class VariableList : pb::IMessage<VariableList> {
    private static readonly pb::MessageParser<VariableList> _parser = new pb::MessageParser<VariableList>(() => new VariableList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariableList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableList(VariableList other) : this() {
      variables_ = other.variables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableList Clone() {
      return new VariableList(this);
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KclLib.API.Variable> _repeated_variables_codec
        = pb::FieldCodec.ForMessage(10, global::KclLib.API.Variable.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Variable> variables_ = new pbc::RepeatedField<global::KclLib.API.Variable>();
    /// <summary>
    /// List of variables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Variable> Variables {
      get { return variables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariableList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariableList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variables_.Equals(other.variables_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variables_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variables_.WriteTo(output, _repeated_variables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variables_.CalculateSize(_repeated_variables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariableList other) {
      if (other == null) {
        return;
      }
      variables_.Add(other.variables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            variables_.AddEntriesFrom(input, _repeated_variables_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for list variables request arguments.
  /// </summary>
  public sealed partial class ListVariables_Args : pb::IMessage<ListVariables_Args> {
    private static readonly pb::MessageParser<ListVariables_Args> _parser = new pb::MessageParser<ListVariables_Args>(() => new ListVariables_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListVariables_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Args(ListVariables_Args other) : this() {
      files_ = other.files_.Clone();
      specs_ = other.specs_.Clone();
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Args Clone() {
      return new ListVariables_Args(this);
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_files_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> files_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Files to be processed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Files {
      get { return files_; }
    }

    /// <summary>Field number for the "specs" field.</summary>
    public const int SpecsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_specs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> specs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Specifications for variables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Specs {
      get { return specs_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::KclLib.API.ListVariables_Options options_;
    /// <summary>
    /// Options for listing variables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.ListVariables_Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListVariables_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListVariables_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!files_.Equals(other.files_)) return false;
      if(!specs_.Equals(other.specs_)) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= files_.GetHashCode();
      hash ^= specs_.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      files_.WriteTo(output, _repeated_files_codec);
      specs_.WriteTo(output, _repeated_specs_codec);
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += files_.CalculateSize(_repeated_files_codec);
      size += specs_.CalculateSize(_repeated_specs_codec);
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListVariables_Args other) {
      if (other == null) {
        return;
      }
      files_.Add(other.files_);
      specs_.Add(other.specs_);
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::KclLib.API.ListVariables_Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            files_.AddEntriesFrom(input, _repeated_files_codec);
            break;
          }
          case 18: {
            specs_.AddEntriesFrom(input, _repeated_specs_codec);
            break;
          }
          case 26: {
            if (options_ == null) {
              Options = new global::KclLib.API.ListVariables_Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for list variables response.
  /// </summary>
  public sealed partial class ListVariables_Result : pb::IMessage<ListVariables_Result> {
    private static readonly pb::MessageParser<ListVariables_Result> _parser = new pb::MessageParser<ListVariables_Result>(() => new ListVariables_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListVariables_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Result(ListVariables_Result other) : this() {
      variables_ = other.variables_.Clone();
      unsupportedCodes_ = other.unsupportedCodes_.Clone();
      parseErrors_ = other.parseErrors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVariables_Result Clone() {
      return new ListVariables_Result(this);
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::KclLib.API.VariableList>.Codec _map_variables_codec
        = new pbc::MapField<string, global::KclLib.API.VariableList>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.VariableList.Parser), 10);
    private readonly pbc::MapField<string, global::KclLib.API.VariableList> variables_ = new pbc::MapField<string, global::KclLib.API.VariableList>();
    /// <summary>
    /// Map of variable lists by file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.VariableList> Variables {
      get { return variables_; }
    }

    /// <summary>Field number for the "unsupported_codes" field.</summary>
    public const int UnsupportedCodesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_unsupportedCodes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> unsupportedCodes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of unsupported codes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnsupportedCodes {
      get { return unsupportedCodes_; }
    }

    /// <summary>Field number for the "parse_errors" field.</summary>
    public const int ParseErrorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.Error> _repeated_parseErrors_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.Error.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Error> parseErrors_ = new pbc::RepeatedField<global::KclLib.API.Error>();
    /// <summary>
    /// List of parse errors encountered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Error> ParseErrors {
      get { return parseErrors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListVariables_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListVariables_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Variables.Equals(other.Variables)) return false;
      if(!unsupportedCodes_.Equals(other.unsupportedCodes_)) return false;
      if(!parseErrors_.Equals(other.parseErrors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Variables.GetHashCode();
      hash ^= unsupportedCodes_.GetHashCode();
      hash ^= parseErrors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variables_.WriteTo(output, _map_variables_codec);
      unsupportedCodes_.WriteTo(output, _repeated_unsupportedCodes_codec);
      parseErrors_.WriteTo(output, _repeated_parseErrors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variables_.CalculateSize(_map_variables_codec);
      size += unsupportedCodes_.CalculateSize(_repeated_unsupportedCodes_codec);
      size += parseErrors_.CalculateSize(_repeated_parseErrors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListVariables_Result other) {
      if (other == null) {
        return;
      }
      variables_.Add(other.variables_);
      unsupportedCodes_.Add(other.unsupportedCodes_);
      parseErrors_.Add(other.parseErrors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            variables_.AddEntriesFrom(input, _map_variables_codec);
            break;
          }
          case 18: {
            unsupportedCodes_.AddEntriesFrom(input, _repeated_unsupportedCodes_codec);
            break;
          }
          case 26: {
            parseErrors_.AddEntriesFrom(input, _repeated_parseErrors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a variable.
  /// </summary>
  public sealed partial class Variable : pb::IMessage<Variable> {
    private static readonly pb::MessageParser<Variable> _parser = new pb::MessageParser<Variable>(() => new Variable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable(Variable other) : this() {
      value_ = other.value_;
      typeName_ = other.typeName_;
      opSym_ = other.opSym_;
      listItems_ = other.listItems_.Clone();
      dictEntries_ = other.dictEntries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable Clone() {
      return new Variable(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    /// Value of the variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 2;
    private string typeName_ = "";
    /// <summary>
    /// Type name of the variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op_sym" field.</summary>
    public const int OpSymFieldNumber = 3;
    private string opSym_ = "";
    /// <summary>
    /// Operation symbol associated with the variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpSym {
      get { return opSym_; }
      set {
        opSym_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "list_items" field.</summary>
    public const int ListItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::KclLib.API.Variable> _repeated_listItems_codec
        = pb::FieldCodec.ForMessage(34, global::KclLib.API.Variable.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Variable> listItems_ = new pbc::RepeatedField<global::KclLib.API.Variable>();
    /// <summary>
    /// List items if the variable is a list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Variable> ListItems {
      get { return listItems_; }
    }

    /// <summary>Field number for the "dict_entries" field.</summary>
    public const int DictEntriesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::KclLib.API.MapEntry> _repeated_dictEntries_codec
        = pb::FieldCodec.ForMessage(42, global::KclLib.API.MapEntry.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.MapEntry> dictEntries_ = new pbc::RepeatedField<global::KclLib.API.MapEntry>();
    /// <summary>
    /// Dictionary entries if the variable is a dictionary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.MapEntry> DictEntries {
      get { return dictEntries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (TypeName != other.TypeName) return false;
      if (OpSym != other.OpSym) return false;
      if(!listItems_.Equals(other.listItems_)) return false;
      if(!dictEntries_.Equals(other.dictEntries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (OpSym.Length != 0) hash ^= OpSym.GetHashCode();
      hash ^= listItems_.GetHashCode();
      hash ^= dictEntries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TypeName);
      }
      if (OpSym.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OpSym);
      }
      listItems_.WriteTo(output, _repeated_listItems_codec);
      dictEntries_.WriteTo(output, _repeated_dictEntries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (OpSym.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpSym);
      }
      size += listItems_.CalculateSize(_repeated_listItems_codec);
      size += dictEntries_.CalculateSize(_repeated_dictEntries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variable other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.OpSym.Length != 0) {
        OpSym = other.OpSym;
      }
      listItems_.Add(other.listItems_);
      dictEntries_.Add(other.dictEntries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 18: {
            TypeName = input.ReadString();
            break;
          }
          case 26: {
            OpSym = input.ReadString();
            break;
          }
          case 34: {
            listItems_.AddEntriesFrom(input, _repeated_listItems_codec);
            break;
          }
          case 42: {
            dictEntries_.AddEntriesFrom(input, _repeated_dictEntries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a map entry.
  /// </summary>
  public sealed partial class MapEntry : pb::IMessage<MapEntry> {
    private static readonly pb::MessageParser<MapEntry> _parser = new pb::MessageParser<MapEntry>(() => new MapEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEntry(MapEntry other) : this() {
      key_ = other.key_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEntry Clone() {
      return new MapEntry(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Key of the map entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::KclLib.API.Variable value_;
    /// <summary>
    /// Value of the map entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.Variable Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapEntry other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::KclLib.API.Variable();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::KclLib.API.Variable();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for get schema type mapping request arguments.
  /// </summary>
  public sealed partial class GetSchemaTypeMapping_Args : pb::IMessage<GetSchemaTypeMapping_Args> {
    private static readonly pb::MessageParser<GetSchemaTypeMapping_Args> _parser = new pb::MessageParser<GetSchemaTypeMapping_Args>(() => new GetSchemaTypeMapping_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSchemaTypeMapping_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSchemaTypeMapping_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSchemaTypeMapping_Args(GetSchemaTypeMapping_Args other) : this() {
      execArgs_ = other.execArgs_ != null ? other.execArgs_.Clone() : null;
      schemaName_ = other.schemaName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSchemaTypeMapping_Args Clone() {
      return new GetSchemaTypeMapping_Args(this);
    }

    /// <summary>Field number for the "exec_args" field.</summary>
    public const int ExecArgsFieldNumber = 1;
    private global::KclLib.API.ExecProgram_Args execArgs_;
    /// <summary>
    /// Arguments for executing the program.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.ExecProgram_Args ExecArgs {
      get { return execArgs_; }
      set {
        execArgs_ = value;
      }
    }

    /// <summary>Field number for the "schema_name" field.</summary>
    public const int SchemaNameFieldNumber = 2;
    private string schemaName_ = "";
    /// <summary>
    /// Name of the schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSchemaTypeMapping_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSchemaTypeMapping_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExecArgs, other.ExecArgs)) return false;
      if (SchemaName != other.SchemaName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (execArgs_ != null) hash ^= ExecArgs.GetHashCode();
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (execArgs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExecArgs);
      }
      if (SchemaName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SchemaName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (execArgs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecArgs);
      }
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSchemaTypeMapping_Args other) {
      if (other == null) {
        return;
      }
      if (other.execArgs_ != null) {
        if (execArgs_ == null) {
          ExecArgs = new global::KclLib.API.ExecProgram_Args();
        }
        ExecArgs.MergeFrom(other.ExecArgs);
      }
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (execArgs_ == null) {
              ExecArgs = new global::KclLib.API.ExecProgram_Args();
            }
            input.ReadMessage(ExecArgs);
            break;
          }
          case 18: {
            SchemaName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for get schema type mapping response.
  /// </summary>
  public sealed partial class GetSchemaTypeMapping_Result : pb::IMessage<GetSchemaTypeMapping_Result> {
    private static readonly pb::MessageParser<GetSchemaTypeMapping_Result> _parser = new pb::MessageParser<GetSchemaTypeMapping_Result>(() => new GetSchemaTypeMapping_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSchemaTypeMapping_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSchemaTypeMapping_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSchemaTypeMapping_Result(GetSchemaTypeMapping_Result other) : this() {
      schemaTypeMapping_ = other.schemaTypeMapping_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSchemaTypeMapping_Result Clone() {
      return new GetSchemaTypeMapping_Result(this);
    }

    /// <summary>Field number for the "schema_type_mapping" field.</summary>
    public const int SchemaTypeMappingFieldNumber = 1;
    private static readonly pbc::MapField<string, global::KclLib.API.KclType>.Codec _map_schemaTypeMapping_codec
        = new pbc::MapField<string, global::KclLib.API.KclType>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.KclType.Parser), 10);
    private readonly pbc::MapField<string, global::KclLib.API.KclType> schemaTypeMapping_ = new pbc::MapField<string, global::KclLib.API.KclType>();
    /// <summary>
    /// Map of schema type mappings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.KclType> SchemaTypeMapping {
      get { return schemaTypeMapping_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSchemaTypeMapping_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSchemaTypeMapping_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!SchemaTypeMapping.Equals(other.SchemaTypeMapping)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= SchemaTypeMapping.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      schemaTypeMapping_.WriteTo(output, _map_schemaTypeMapping_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += schemaTypeMapping_.CalculateSize(_map_schemaTypeMapping_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSchemaTypeMapping_Result other) {
      if (other == null) {
        return;
      }
      schemaTypeMapping_.Add(other.schemaTypeMapping_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            schemaTypeMapping_.AddEntriesFrom(input, _map_schemaTypeMapping_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for validate code request arguments.
  /// </summary>
  public sealed partial class ValidateCode_Args : pb::IMessage<ValidateCode_Args> {
    private static readonly pb::MessageParser<ValidateCode_Args> _parser = new pb::MessageParser<ValidateCode_Args>(() => new ValidateCode_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateCode_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCode_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCode_Args(ValidateCode_Args other) : this() {
      datafile_ = other.datafile_;
      data_ = other.data_;
      file_ = other.file_;
      code_ = other.code_;
      schema_ = other.schema_;
      attributeName_ = other.attributeName_;
      format_ = other.format_;
      externalPkgs_ = other.externalPkgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCode_Args Clone() {
      return new ValidateCode_Args(this);
    }

    /// <summary>Field number for the "datafile" field.</summary>
    public const int DatafileFieldNumber = 1;
    private string datafile_ = "";
    /// <summary>
    /// Path to the data file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Datafile {
      get { return datafile_; }
      set {
        datafile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    /// <summary>
    /// Data content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 3;
    private string file_ = "";
    /// <summary>
    /// Path to the code file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private string code_ = "";
    /// <summary>
    /// Source code content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 5;
    private string schema_ = "";
    /// <summary>
    /// Name of the schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attribute_name" field.</summary>
    public const int AttributeNameFieldNumber = 6;
    private string attributeName_ = "";
    /// <summary>
    /// Name of the attribute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttributeName {
      get { return attributeName_; }
      set {
        attributeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 7;
    private string format_ = "";
    /// <summary>
    /// Format of the validation (e.g., "json", "yaml").
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_pkgs" field.</summary>
    public const int ExternalPkgsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::KclLib.API.ExternalPkg> _repeated_externalPkgs_codec
        = pb::FieldCodec.ForMessage(66, global::KclLib.API.ExternalPkg.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.ExternalPkg> externalPkgs_ = new pbc::RepeatedField<global::KclLib.API.ExternalPkg>();
    /// <summary>
    /// List of external packages updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.ExternalPkg> ExternalPkgs {
      get { return externalPkgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateCode_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateCode_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Datafile != other.Datafile) return false;
      if (Data != other.Data) return false;
      if (File != other.File) return false;
      if (Code != other.Code) return false;
      if (Schema != other.Schema) return false;
      if (AttributeName != other.AttributeName) return false;
      if (Format != other.Format) return false;
      if(!externalPkgs_.Equals(other.externalPkgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Datafile.Length != 0) hash ^= Datafile.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      if (AttributeName.Length != 0) hash ^= AttributeName.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      hash ^= externalPkgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Datafile.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Datafile);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (File.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(File);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Code);
      }
      if (Schema.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Schema);
      }
      if (AttributeName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AttributeName);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Format);
      }
      externalPkgs_.WriteTo(output, _repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Datafile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Datafile);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (AttributeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttributeName);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      size += externalPkgs_.CalculateSize(_repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateCode_Args other) {
      if (other == null) {
        return;
      }
      if (other.Datafile.Length != 0) {
        Datafile = other.Datafile;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
      if (other.AttributeName.Length != 0) {
        AttributeName = other.AttributeName;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      externalPkgs_.Add(other.externalPkgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Datafile = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 26: {
            File = input.ReadString();
            break;
          }
          case 34: {
            Code = input.ReadString();
            break;
          }
          case 42: {
            Schema = input.ReadString();
            break;
          }
          case 50: {
            AttributeName = input.ReadString();
            break;
          }
          case 58: {
            Format = input.ReadString();
            break;
          }
          case 66: {
            externalPkgs_.AddEntriesFrom(input, _repeated_externalPkgs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for validate code response.
  /// </summary>
  public sealed partial class ValidateCode_Result : pb::IMessage<ValidateCode_Result> {
    private static readonly pb::MessageParser<ValidateCode_Result> _parser = new pb::MessageParser<ValidateCode_Result>(() => new ValidateCode_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateCode_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCode_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCode_Result(ValidateCode_Result other) : this() {
      success_ = other.success_;
      errMessage_ = other.errMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateCode_Result Clone() {
      return new ValidateCode_Result(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// Flag indicating if validation was successful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "err_message" field.</summary>
    public const int ErrMessageFieldNumber = 2;
    private string errMessage_ = "";
    /// <summary>
    /// Error message from validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMessage {
      get { return errMessage_; }
      set {
        errMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateCode_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateCode_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (ErrMessage != other.ErrMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrMessage.Length != 0) hash ^= ErrMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (ErrMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateCode_Result other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrMessage.Length != 0) {
        ErrMessage = other.ErrMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            ErrMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a position in the source code.
  /// </summary>
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      line_ = other.line_;
      column_ = other.column_;
      filename_ = other.filename_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    private long line_;
    /// <summary>
    /// Line number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "column" field.</summary>
    public const int ColumnFieldNumber = 2;
    private long column_;
    /// <summary>
    /// Column number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Column {
      get { return column_; }
      set {
        column_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 3;
    private string filename_ = "";
    /// <summary>
    /// Filename the position refers to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Line != other.Line) return false;
      if (Column != other.Column) return false;
      if (Filename != other.Filename) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Line != 0L) hash ^= Line.GetHashCode();
      if (Column != 0L) hash ^= Column.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Line != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Line);
      }
      if (Column != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Column);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Filename);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Line != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Line);
      }
      if (Column != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Column);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.Line != 0L) {
        Line = other.Line;
      }
      if (other.Column != 0L) {
        Column = other.Column;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Line = input.ReadInt64();
            break;
          }
          case 16: {
            Column = input.ReadInt64();
            break;
          }
          case 26: {
            Filename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for list dependency files request arguments.
  /// </summary>
  public sealed partial class ListDepFiles_Args : pb::IMessage<ListDepFiles_Args> {
    private static readonly pb::MessageParser<ListDepFiles_Args> _parser = new pb::MessageParser<ListDepFiles_Args>(() => new ListDepFiles_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDepFiles_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDepFiles_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDepFiles_Args(ListDepFiles_Args other) : this() {
      workDir_ = other.workDir_;
      useAbsPath_ = other.useAbsPath_;
      includeAll_ = other.includeAll_;
      useFastParser_ = other.useFastParser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDepFiles_Args Clone() {
      return new ListDepFiles_Args(this);
    }

    /// <summary>Field number for the "work_dir" field.</summary>
    public const int WorkDirFieldNumber = 1;
    private string workDir_ = "";
    /// <summary>
    /// Working directory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkDir {
      get { return workDir_; }
      set {
        workDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_abs_path" field.</summary>
    public const int UseAbsPathFieldNumber = 2;
    private bool useAbsPath_;
    /// <summary>
    /// Flag to use absolute paths.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseAbsPath {
      get { return useAbsPath_; }
      set {
        useAbsPath_ = value;
      }
    }

    /// <summary>Field number for the "include_all" field.</summary>
    public const int IncludeAllFieldNumber = 3;
    private bool includeAll_;
    /// <summary>
    /// Flag to include all files.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeAll {
      get { return includeAll_; }
      set {
        includeAll_ = value;
      }
    }

    /// <summary>Field number for the "use_fast_parser" field.</summary>
    public const int UseFastParserFieldNumber = 4;
    private bool useFastParser_;
    /// <summary>
    /// Flag to use fast parser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFastParser {
      get { return useFastParser_; }
      set {
        useFastParser_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDepFiles_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDepFiles_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkDir != other.WorkDir) return false;
      if (UseAbsPath != other.UseAbsPath) return false;
      if (IncludeAll != other.IncludeAll) return false;
      if (UseFastParser != other.UseFastParser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkDir.Length != 0) hash ^= WorkDir.GetHashCode();
      if (UseAbsPath != false) hash ^= UseAbsPath.GetHashCode();
      if (IncludeAll != false) hash ^= IncludeAll.GetHashCode();
      if (UseFastParser != false) hash ^= UseFastParser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkDir.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkDir);
      }
      if (UseAbsPath != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseAbsPath);
      }
      if (IncludeAll != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeAll);
      }
      if (UseFastParser != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseFastParser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkDir);
      }
      if (UseAbsPath != false) {
        size += 1 + 1;
      }
      if (IncludeAll != false) {
        size += 1 + 1;
      }
      if (UseFastParser != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDepFiles_Args other) {
      if (other == null) {
        return;
      }
      if (other.WorkDir.Length != 0) {
        WorkDir = other.WorkDir;
      }
      if (other.UseAbsPath != false) {
        UseAbsPath = other.UseAbsPath;
      }
      if (other.IncludeAll != false) {
        IncludeAll = other.IncludeAll;
      }
      if (other.UseFastParser != false) {
        UseFastParser = other.UseFastParser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WorkDir = input.ReadString();
            break;
          }
          case 16: {
            UseAbsPath = input.ReadBool();
            break;
          }
          case 24: {
            IncludeAll = input.ReadBool();
            break;
          }
          case 32: {
            UseFastParser = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for list dependency files response.
  /// </summary>
  public sealed partial class ListDepFiles_Result : pb::IMessage<ListDepFiles_Result> {
    private static readonly pb::MessageParser<ListDepFiles_Result> _parser = new pb::MessageParser<ListDepFiles_Result>(() => new ListDepFiles_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDepFiles_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDepFiles_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDepFiles_Result(ListDepFiles_Result other) : this() {
      pkgroot_ = other.pkgroot_;
      pkgpath_ = other.pkgpath_;
      files_ = other.files_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDepFiles_Result Clone() {
      return new ListDepFiles_Result(this);
    }

    /// <summary>Field number for the "pkgroot" field.</summary>
    public const int PkgrootFieldNumber = 1;
    private string pkgroot_ = "";
    /// <summary>
    /// Root package path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pkgroot {
      get { return pkgroot_; }
      set {
        pkgroot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pkgpath" field.</summary>
    public const int PkgpathFieldNumber = 2;
    private string pkgpath_ = "";
    /// <summary>
    /// Package path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pkgpath {
      get { return pkgpath_; }
      set {
        pkgpath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_files_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> files_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of file paths in the package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Files {
      get { return files_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDepFiles_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDepFiles_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pkgroot != other.Pkgroot) return false;
      if (Pkgpath != other.Pkgpath) return false;
      if(!files_.Equals(other.files_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pkgroot.Length != 0) hash ^= Pkgroot.GetHashCode();
      if (Pkgpath.Length != 0) hash ^= Pkgpath.GetHashCode();
      hash ^= files_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pkgroot.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pkgroot);
      }
      if (Pkgpath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pkgpath);
      }
      files_.WriteTo(output, _repeated_files_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pkgroot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pkgroot);
      }
      if (Pkgpath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pkgpath);
      }
      size += files_.CalculateSize(_repeated_files_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDepFiles_Result other) {
      if (other == null) {
        return;
      }
      if (other.Pkgroot.Length != 0) {
        Pkgroot = other.Pkgroot;
      }
      if (other.Pkgpath.Length != 0) {
        Pkgpath = other.Pkgpath;
      }
      files_.Add(other.files_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pkgroot = input.ReadString();
            break;
          }
          case 18: {
            Pkgpath = input.ReadString();
            break;
          }
          case 26: {
            files_.AddEntriesFrom(input, _repeated_files_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for load settings files request arguments.
  /// </summary>
  public sealed partial class LoadSettingsFiles_Args : pb::IMessage<LoadSettingsFiles_Args> {
    private static readonly pb::MessageParser<LoadSettingsFiles_Args> _parser = new pb::MessageParser<LoadSettingsFiles_Args>(() => new LoadSettingsFiles_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadSettingsFiles_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSettingsFiles_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSettingsFiles_Args(LoadSettingsFiles_Args other) : this() {
      workDir_ = other.workDir_;
      files_ = other.files_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSettingsFiles_Args Clone() {
      return new LoadSettingsFiles_Args(this);
    }

    /// <summary>Field number for the "work_dir" field.</summary>
    public const int WorkDirFieldNumber = 1;
    private string workDir_ = "";
    /// <summary>
    /// Working directory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkDir {
      get { return workDir_; }
      set {
        workDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_files_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> files_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Setting files to load.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Files {
      get { return files_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadSettingsFiles_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadSettingsFiles_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkDir != other.WorkDir) return false;
      if(!files_.Equals(other.files_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkDir.Length != 0) hash ^= WorkDir.GetHashCode();
      hash ^= files_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkDir.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkDir);
      }
      files_.WriteTo(output, _repeated_files_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkDir);
      }
      size += files_.CalculateSize(_repeated_files_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadSettingsFiles_Args other) {
      if (other == null) {
        return;
      }
      if (other.WorkDir.Length != 0) {
        WorkDir = other.WorkDir;
      }
      files_.Add(other.files_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WorkDir = input.ReadString();
            break;
          }
          case 18: {
            files_.AddEntriesFrom(input, _repeated_files_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for load settings files response.
  /// </summary>
  public sealed partial class LoadSettingsFiles_Result : pb::IMessage<LoadSettingsFiles_Result> {
    private static readonly pb::MessageParser<LoadSettingsFiles_Result> _parser = new pb::MessageParser<LoadSettingsFiles_Result>(() => new LoadSettingsFiles_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadSettingsFiles_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSettingsFiles_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSettingsFiles_Result(LoadSettingsFiles_Result other) : this() {
      kclCliConfigs_ = other.kclCliConfigs_ != null ? other.kclCliConfigs_.Clone() : null;
      kclOptions_ = other.kclOptions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSettingsFiles_Result Clone() {
      return new LoadSettingsFiles_Result(this);
    }

    /// <summary>Field number for the "kcl_cli_configs" field.</summary>
    public const int KclCliConfigsFieldNumber = 1;
    private global::KclLib.API.CliConfig kclCliConfigs_;
    /// <summary>
    /// KCL CLI configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.CliConfig KclCliConfigs {
      get { return kclCliConfigs_; }
      set {
        kclCliConfigs_ = value;
      }
    }

    /// <summary>Field number for the "kcl_options" field.</summary>
    public const int KclOptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KclLib.API.KeyValuePair> _repeated_kclOptions_codec
        = pb::FieldCodec.ForMessage(18, global::KclLib.API.KeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.KeyValuePair> kclOptions_ = new pbc::RepeatedField<global::KclLib.API.KeyValuePair>();
    /// <summary>
    /// List of KCL options as key-value pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.KeyValuePair> KclOptions {
      get { return kclOptions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadSettingsFiles_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadSettingsFiles_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(KclCliConfigs, other.KclCliConfigs)) return false;
      if(!kclOptions_.Equals(other.kclOptions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kclCliConfigs_ != null) hash ^= KclCliConfigs.GetHashCode();
      hash ^= kclOptions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kclCliConfigs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(KclCliConfigs);
      }
      kclOptions_.WriteTo(output, _repeated_kclOptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kclCliConfigs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KclCliConfigs);
      }
      size += kclOptions_.CalculateSize(_repeated_kclOptions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadSettingsFiles_Result other) {
      if (other == null) {
        return;
      }
      if (other.kclCliConfigs_ != null) {
        if (kclCliConfigs_ == null) {
          KclCliConfigs = new global::KclLib.API.CliConfig();
        }
        KclCliConfigs.MergeFrom(other.KclCliConfigs);
      }
      kclOptions_.Add(other.kclOptions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (kclCliConfigs_ == null) {
              KclCliConfigs = new global::KclLib.API.CliConfig();
            }
            input.ReadMessage(KclCliConfigs);
            break;
          }
          case 18: {
            kclOptions_.AddEntriesFrom(input, _repeated_kclOptions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing KCL CLI configuration.
  /// </summary>
  public sealed partial class CliConfig : pb::IMessage<CliConfig> {
    private static readonly pb::MessageParser<CliConfig> _parser = new pb::MessageParser<CliConfig>(() => new CliConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CliConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CliConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CliConfig(CliConfig other) : this() {
      files_ = other.files_.Clone();
      output_ = other.output_;
      overrides_ = other.overrides_.Clone();
      pathSelector_ = other.pathSelector_.Clone();
      strictRangeCheck_ = other.strictRangeCheck_;
      disableNone_ = other.disableNone_;
      verbose_ = other.verbose_;
      debug_ = other.debug_;
      sortKeys_ = other.sortKeys_;
      showHidden_ = other.showHidden_;
      includeSchemaTypePath_ = other.includeSchemaTypePath_;
      fastEval_ = other.fastEval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CliConfig Clone() {
      return new CliConfig(this);
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_files_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> files_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of files.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Files {
      get { return files_; }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 2;
    private string output_ = "";
    /// <summary>
    /// Output path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output {
      get { return output_; }
      set {
        output_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overrides" field.</summary>
    public const int OverridesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_overrides_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> overrides_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of overrides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Overrides {
      get { return overrides_; }
    }

    /// <summary>Field number for the "path_selector" field.</summary>
    public const int PathSelectorFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_pathSelector_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> pathSelector_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Path selectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PathSelector {
      get { return pathSelector_; }
    }

    /// <summary>Field number for the "strict_range_check" field.</summary>
    public const int StrictRangeCheckFieldNumber = 5;
    private bool strictRangeCheck_;
    /// <summary>
    /// Flag for strict range check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StrictRangeCheck {
      get { return strictRangeCheck_; }
      set {
        strictRangeCheck_ = value;
      }
    }

    /// <summary>Field number for the "disable_none" field.</summary>
    public const int DisableNoneFieldNumber = 6;
    private bool disableNone_;
    /// <summary>
    /// Flag to disable none values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableNone {
      get { return disableNone_; }
      set {
        disableNone_ = value;
      }
    }

    /// <summary>Field number for the "verbose" field.</summary>
    public const int VerboseFieldNumber = 7;
    private long verbose_;
    /// <summary>
    /// Verbose level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Verbose {
      get { return verbose_; }
      set {
        verbose_ = value;
      }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 8;
    private bool debug_;
    /// <summary>
    /// Debug flag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    /// <summary>Field number for the "sort_keys" field.</summary>
    public const int SortKeysFieldNumber = 9;
    private bool sortKeys_;
    /// <summary>
    /// Flag to sort keys in YAML/JSON results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SortKeys {
      get { return sortKeys_; }
      set {
        sortKeys_ = value;
      }
    }

    /// <summary>Field number for the "show_hidden" field.</summary>
    public const int ShowHiddenFieldNumber = 10;
    private bool showHidden_;
    /// <summary>
    /// Flag to show hidden attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowHidden {
      get { return showHidden_; }
      set {
        showHidden_ = value;
      }
    }

    /// <summary>Field number for the "include_schema_type_path" field.</summary>
    public const int IncludeSchemaTypePathFieldNumber = 11;
    private bool includeSchemaTypePath_;
    /// <summary>
    /// Flag to include schema type path in results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeSchemaTypePath {
      get { return includeSchemaTypePath_; }
      set {
        includeSchemaTypePath_ = value;
      }
    }

    /// <summary>Field number for the "fast_eval" field.</summary>
    public const int FastEvalFieldNumber = 12;
    private bool fastEval_;
    /// <summary>
    /// Flag for fast evaluation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FastEval {
      get { return fastEval_; }
      set {
        fastEval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CliConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CliConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!files_.Equals(other.files_)) return false;
      if (Output != other.Output) return false;
      if(!overrides_.Equals(other.overrides_)) return false;
      if(!pathSelector_.Equals(other.pathSelector_)) return false;
      if (StrictRangeCheck != other.StrictRangeCheck) return false;
      if (DisableNone != other.DisableNone) return false;
      if (Verbose != other.Verbose) return false;
      if (Debug != other.Debug) return false;
      if (SortKeys != other.SortKeys) return false;
      if (ShowHidden != other.ShowHidden) return false;
      if (IncludeSchemaTypePath != other.IncludeSchemaTypePath) return false;
      if (FastEval != other.FastEval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= files_.GetHashCode();
      if (Output.Length != 0) hash ^= Output.GetHashCode();
      hash ^= overrides_.GetHashCode();
      hash ^= pathSelector_.GetHashCode();
      if (StrictRangeCheck != false) hash ^= StrictRangeCheck.GetHashCode();
      if (DisableNone != false) hash ^= DisableNone.GetHashCode();
      if (Verbose != 0L) hash ^= Verbose.GetHashCode();
      if (Debug != false) hash ^= Debug.GetHashCode();
      if (SortKeys != false) hash ^= SortKeys.GetHashCode();
      if (ShowHidden != false) hash ^= ShowHidden.GetHashCode();
      if (IncludeSchemaTypePath != false) hash ^= IncludeSchemaTypePath.GetHashCode();
      if (FastEval != false) hash ^= FastEval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      files_.WriteTo(output, _repeated_files_codec);
      if (Output.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Output);
      }
      overrides_.WriteTo(output, _repeated_overrides_codec);
      pathSelector_.WriteTo(output, _repeated_pathSelector_codec);
      if (StrictRangeCheck != false) {
        output.WriteRawTag(40);
        output.WriteBool(StrictRangeCheck);
      }
      if (DisableNone != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableNone);
      }
      if (Verbose != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Verbose);
      }
      if (Debug != false) {
        output.WriteRawTag(64);
        output.WriteBool(Debug);
      }
      if (SortKeys != false) {
        output.WriteRawTag(72);
        output.WriteBool(SortKeys);
      }
      if (ShowHidden != false) {
        output.WriteRawTag(80);
        output.WriteBool(ShowHidden);
      }
      if (IncludeSchemaTypePath != false) {
        output.WriteRawTag(88);
        output.WriteBool(IncludeSchemaTypePath);
      }
      if (FastEval != false) {
        output.WriteRawTag(96);
        output.WriteBool(FastEval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += files_.CalculateSize(_repeated_files_codec);
      if (Output.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output);
      }
      size += overrides_.CalculateSize(_repeated_overrides_codec);
      size += pathSelector_.CalculateSize(_repeated_pathSelector_codec);
      if (StrictRangeCheck != false) {
        size += 1 + 1;
      }
      if (DisableNone != false) {
        size += 1 + 1;
      }
      if (Verbose != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Verbose);
      }
      if (Debug != false) {
        size += 1 + 1;
      }
      if (SortKeys != false) {
        size += 1 + 1;
      }
      if (ShowHidden != false) {
        size += 1 + 1;
      }
      if (IncludeSchemaTypePath != false) {
        size += 1 + 1;
      }
      if (FastEval != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CliConfig other) {
      if (other == null) {
        return;
      }
      files_.Add(other.files_);
      if (other.Output.Length != 0) {
        Output = other.Output;
      }
      overrides_.Add(other.overrides_);
      pathSelector_.Add(other.pathSelector_);
      if (other.StrictRangeCheck != false) {
        StrictRangeCheck = other.StrictRangeCheck;
      }
      if (other.DisableNone != false) {
        DisableNone = other.DisableNone;
      }
      if (other.Verbose != 0L) {
        Verbose = other.Verbose;
      }
      if (other.Debug != false) {
        Debug = other.Debug;
      }
      if (other.SortKeys != false) {
        SortKeys = other.SortKeys;
      }
      if (other.ShowHidden != false) {
        ShowHidden = other.ShowHidden;
      }
      if (other.IncludeSchemaTypePath != false) {
        IncludeSchemaTypePath = other.IncludeSchemaTypePath;
      }
      if (other.FastEval != false) {
        FastEval = other.FastEval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            files_.AddEntriesFrom(input, _repeated_files_codec);
            break;
          }
          case 18: {
            Output = input.ReadString();
            break;
          }
          case 26: {
            overrides_.AddEntriesFrom(input, _repeated_overrides_codec);
            break;
          }
          case 34: {
            pathSelector_.AddEntriesFrom(input, _repeated_pathSelector_codec);
            break;
          }
          case 40: {
            StrictRangeCheck = input.ReadBool();
            break;
          }
          case 48: {
            DisableNone = input.ReadBool();
            break;
          }
          case 56: {
            Verbose = input.ReadInt64();
            break;
          }
          case 64: {
            Debug = input.ReadBool();
            break;
          }
          case 72: {
            SortKeys = input.ReadBool();
            break;
          }
          case 80: {
            ShowHidden = input.ReadBool();
            break;
          }
          case 88: {
            IncludeSchemaTypePath = input.ReadBool();
            break;
          }
          case 96: {
            FastEval = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a key-value pair.
  /// </summary>
  public sealed partial class KeyValuePair : pb::IMessage<KeyValuePair> {
    private static readonly pb::MessageParser<KeyValuePair> _parser = new pb::MessageParser<KeyValuePair>(() => new KeyValuePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair(KeyValuePair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair Clone() {
      return new KeyValuePair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Key of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Value of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for rename request arguments.
  /// </summary>
  public sealed partial class Rename_Args : pb::IMessage<Rename_Args> {
    private static readonly pb::MessageParser<Rename_Args> _parser = new pb::MessageParser<Rename_Args>(() => new Rename_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rename_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rename_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rename_Args(Rename_Args other) : this() {
      packageRoot_ = other.packageRoot_;
      symbolPath_ = other.symbolPath_;
      filePaths_ = other.filePaths_.Clone();
      newName_ = other.newName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rename_Args Clone() {
      return new Rename_Args(this);
    }

    /// <summary>Field number for the "package_root" field.</summary>
    public const int PackageRootFieldNumber = 1;
    private string packageRoot_ = "";
    /// <summary>
    /// File path to the package root.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageRoot {
      get { return packageRoot_; }
      set {
        packageRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_path" field.</summary>
    public const int SymbolPathFieldNumber = 2;
    private string symbolPath_ = "";
    /// <summary>
    /// Path to the target symbol to be renamed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolPath {
      get { return symbolPath_; }
      set {
        symbolPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_paths" field.</summary>
    public const int FilePathsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_filePaths_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> filePaths_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Paths to the source code files.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FilePaths {
      get { return filePaths_; }
    }

    /// <summary>Field number for the "new_name" field.</summary>
    public const int NewNameFieldNumber = 4;
    private string newName_ = "";
    /// <summary>
    /// New name of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rename_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rename_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageRoot != other.PackageRoot) return false;
      if (SymbolPath != other.SymbolPath) return false;
      if(!filePaths_.Equals(other.filePaths_)) return false;
      if (NewName != other.NewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageRoot.Length != 0) hash ^= PackageRoot.GetHashCode();
      if (SymbolPath.Length != 0) hash ^= SymbolPath.GetHashCode();
      hash ^= filePaths_.GetHashCode();
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageRoot.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PackageRoot);
      }
      if (SymbolPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolPath);
      }
      filePaths_.WriteTo(output, _repeated_filePaths_codec);
      if (NewName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageRoot);
      }
      if (SymbolPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolPath);
      }
      size += filePaths_.CalculateSize(_repeated_filePaths_codec);
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rename_Args other) {
      if (other == null) {
        return;
      }
      if (other.PackageRoot.Length != 0) {
        PackageRoot = other.PackageRoot;
      }
      if (other.SymbolPath.Length != 0) {
        SymbolPath = other.SymbolPath;
      }
      filePaths_.Add(other.filePaths_);
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PackageRoot = input.ReadString();
            break;
          }
          case 18: {
            SymbolPath = input.ReadString();
            break;
          }
          case 26: {
            filePaths_.AddEntriesFrom(input, _repeated_filePaths_codec);
            break;
          }
          case 34: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for rename response.
  /// </summary>
  public sealed partial class Rename_Result : pb::IMessage<Rename_Result> {
    private static readonly pb::MessageParser<Rename_Result> _parser = new pb::MessageParser<Rename_Result>(() => new Rename_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rename_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rename_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rename_Result(Rename_Result other) : this() {
      changedFiles_ = other.changedFiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rename_Result Clone() {
      return new Rename_Result(this);
    }

    /// <summary>Field number for the "changed_files" field.</summary>
    public const int ChangedFilesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_changedFiles_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> changedFiles_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of file paths that got changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChangedFiles {
      get { return changedFiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rename_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rename_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changedFiles_.Equals(other.changedFiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changedFiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changedFiles_.WriteTo(output, _repeated_changedFiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changedFiles_.CalculateSize(_repeated_changedFiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rename_Result other) {
      if (other == null) {
        return;
      }
      changedFiles_.Add(other.changedFiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            changedFiles_.AddEntriesFrom(input, _repeated_changedFiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for rename code request arguments.
  /// </summary>
  public sealed partial class RenameCode_Args : pb::IMessage<RenameCode_Args> {
    private static readonly pb::MessageParser<RenameCode_Args> _parser = new pb::MessageParser<RenameCode_Args>(() => new RenameCode_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameCode_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCode_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCode_Args(RenameCode_Args other) : this() {
      packageRoot_ = other.packageRoot_;
      symbolPath_ = other.symbolPath_;
      sourceCodes_ = other.sourceCodes_.Clone();
      newName_ = other.newName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCode_Args Clone() {
      return new RenameCode_Args(this);
    }

    /// <summary>Field number for the "package_root" field.</summary>
    public const int PackageRootFieldNumber = 1;
    private string packageRoot_ = "";
    /// <summary>
    /// File path to the package root.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageRoot {
      get { return packageRoot_; }
      set {
        packageRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_path" field.</summary>
    public const int SymbolPathFieldNumber = 2;
    private string symbolPath_ = "";
    /// <summary>
    /// Path to the target symbol to be renamed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolPath {
      get { return symbolPath_; }
      set {
        symbolPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_codes" field.</summary>
    public const int SourceCodesFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_sourceCodes_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> sourceCodes_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of source code with filename as key and code as value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> SourceCodes {
      get { return sourceCodes_; }
    }

    /// <summary>Field number for the "new_name" field.</summary>
    public const int NewNameFieldNumber = 4;
    private string newName_ = "";
    /// <summary>
    /// New name of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameCode_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameCode_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageRoot != other.PackageRoot) return false;
      if (SymbolPath != other.SymbolPath) return false;
      if (!SourceCodes.Equals(other.SourceCodes)) return false;
      if (NewName != other.NewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageRoot.Length != 0) hash ^= PackageRoot.GetHashCode();
      if (SymbolPath.Length != 0) hash ^= SymbolPath.GetHashCode();
      hash ^= SourceCodes.GetHashCode();
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageRoot.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PackageRoot);
      }
      if (SymbolPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolPath);
      }
      sourceCodes_.WriteTo(output, _map_sourceCodes_codec);
      if (NewName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageRoot);
      }
      if (SymbolPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolPath);
      }
      size += sourceCodes_.CalculateSize(_map_sourceCodes_codec);
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameCode_Args other) {
      if (other == null) {
        return;
      }
      if (other.PackageRoot.Length != 0) {
        PackageRoot = other.PackageRoot;
      }
      if (other.SymbolPath.Length != 0) {
        SymbolPath = other.SymbolPath;
      }
      sourceCodes_.Add(other.sourceCodes_);
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PackageRoot = input.ReadString();
            break;
          }
          case 18: {
            SymbolPath = input.ReadString();
            break;
          }
          case 26: {
            sourceCodes_.AddEntriesFrom(input, _map_sourceCodes_codec);
            break;
          }
          case 34: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for rename code response.
  /// </summary>
  public sealed partial class RenameCode_Result : pb::IMessage<RenameCode_Result> {
    private static readonly pb::MessageParser<RenameCode_Result> _parser = new pb::MessageParser<RenameCode_Result>(() => new RenameCode_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameCode_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCode_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCode_Result(RenameCode_Result other) : this() {
      changedCodes_ = other.changedCodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCode_Result Clone() {
      return new RenameCode_Result(this);
    }

    /// <summary>Field number for the "changed_codes" field.</summary>
    public const int ChangedCodesFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_changedCodes_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> changedCodes_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of changed code with filename as key and modified code as value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ChangedCodes {
      get { return changedCodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameCode_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameCode_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ChangedCodes.Equals(other.ChangedCodes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ChangedCodes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changedCodes_.WriteTo(output, _map_changedCodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changedCodes_.CalculateSize(_map_changedCodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameCode_Result other) {
      if (other == null) {
        return;
      }
      changedCodes_.Add(other.changedCodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            changedCodes_.AddEntriesFrom(input, _map_changedCodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for test request arguments.
  /// </summary>
  public sealed partial class Test_Args : pb::IMessage<Test_Args> {
    private static readonly pb::MessageParser<Test_Args> _parser = new pb::MessageParser<Test_Args>(() => new Test_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_Args(Test_Args other) : this() {
      execArgs_ = other.execArgs_ != null ? other.execArgs_.Clone() : null;
      pkgList_ = other.pkgList_.Clone();
      runRegexp_ = other.runRegexp_;
      failFast_ = other.failFast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_Args Clone() {
      return new Test_Args(this);
    }

    /// <summary>Field number for the "exec_args" field.</summary>
    public const int ExecArgsFieldNumber = 1;
    private global::KclLib.API.ExecProgram_Args execArgs_;
    /// <summary>
    /// Execution program arguments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.ExecProgram_Args ExecArgs {
      get { return execArgs_; }
      set {
        execArgs_ = value;
      }
    }

    /// <summary>Field number for the "pkg_list" field.</summary>
    public const int PkgListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_pkgList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> pkgList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of KCL package paths to be tested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PkgList {
      get { return pkgList_; }
    }

    /// <summary>Field number for the "run_regexp" field.</summary>
    public const int RunRegexpFieldNumber = 3;
    private string runRegexp_ = "";
    /// <summary>
    /// Regular expression for filtering tests to run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunRegexp {
      get { return runRegexp_; }
      set {
        runRegexp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fail_fast" field.</summary>
    public const int FailFastFieldNumber = 4;
    private bool failFast_;
    /// <summary>
    /// Flag to stop the test run on the first failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailFast {
      get { return failFast_; }
      set {
        failFast_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExecArgs, other.ExecArgs)) return false;
      if(!pkgList_.Equals(other.pkgList_)) return false;
      if (RunRegexp != other.RunRegexp) return false;
      if (FailFast != other.FailFast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (execArgs_ != null) hash ^= ExecArgs.GetHashCode();
      hash ^= pkgList_.GetHashCode();
      if (RunRegexp.Length != 0) hash ^= RunRegexp.GetHashCode();
      if (FailFast != false) hash ^= FailFast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (execArgs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExecArgs);
      }
      pkgList_.WriteTo(output, _repeated_pkgList_codec);
      if (RunRegexp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RunRegexp);
      }
      if (FailFast != false) {
        output.WriteRawTag(32);
        output.WriteBool(FailFast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (execArgs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecArgs);
      }
      size += pkgList_.CalculateSize(_repeated_pkgList_codec);
      if (RunRegexp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunRegexp);
      }
      if (FailFast != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test_Args other) {
      if (other == null) {
        return;
      }
      if (other.execArgs_ != null) {
        if (execArgs_ == null) {
          ExecArgs = new global::KclLib.API.ExecProgram_Args();
        }
        ExecArgs.MergeFrom(other.ExecArgs);
      }
      pkgList_.Add(other.pkgList_);
      if (other.RunRegexp.Length != 0) {
        RunRegexp = other.RunRegexp;
      }
      if (other.FailFast != false) {
        FailFast = other.FailFast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (execArgs_ == null) {
              ExecArgs = new global::KclLib.API.ExecProgram_Args();
            }
            input.ReadMessage(ExecArgs);
            break;
          }
          case 18: {
            pkgList_.AddEntriesFrom(input, _repeated_pkgList_codec);
            break;
          }
          case 26: {
            RunRegexp = input.ReadString();
            break;
          }
          case 32: {
            FailFast = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for test response.
  /// </summary>
  public sealed partial class Test_Result : pb::IMessage<Test_Result> {
    private static readonly pb::MessageParser<Test_Result> _parser = new pb::MessageParser<Test_Result>(() => new Test_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_Result(Test_Result other) : this() {
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_Result Clone() {
      return new Test_Result(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KclLib.API.TestCaseInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::KclLib.API.TestCaseInfo.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.TestCaseInfo> info_ = new pbc::RepeatedField<global::KclLib.API.TestCaseInfo>();
    /// <summary>
    /// List of test case information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.TestCaseInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test_Result other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing information about a single test case.
  /// </summary>
  public sealed partial class TestCaseInfo : pb::IMessage<TestCaseInfo> {
    private static readonly pb::MessageParser<TestCaseInfo> _parser = new pb::MessageParser<TestCaseInfo>(() => new TestCaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseInfo(TestCaseInfo other) : this() {
      name_ = other.name_;
      error_ = other.error_;
      duration_ = other.duration_;
      logMessage_ = other.logMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseInfo Clone() {
      return new TestCaseInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the test case.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    /// <summary>
    /// Error message if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private ulong duration_;
    /// <summary>
    /// Duration of the test case in microseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "log_message" field.</summary>
    public const int LogMessageFieldNumber = 4;
    private string logMessage_ = "";
    /// <summary>
    /// Log message from the test case.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogMessage {
      get { return logMessage_; }
      set {
        logMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Error != other.Error) return false;
      if (Duration != other.Duration) return false;
      if (LogMessage != other.LogMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (Duration != 0UL) hash ^= Duration.GetHashCode();
      if (LogMessage.Length != 0) hash ^= LogMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (Duration != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Duration);
      }
      if (LogMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LogMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (Duration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Duration);
      }
      if (LogMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.Duration != 0UL) {
        Duration = other.Duration;
      }
      if (other.LogMessage.Length != 0) {
        LogMessage = other.LogMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 24: {
            Duration = input.ReadUInt64();
            break;
          }
          case 34: {
            LogMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for update dependencies request arguments.
  /// </summary>
  public sealed partial class UpdateDependencies_Args : pb::IMessage<UpdateDependencies_Args> {
    private static readonly pb::MessageParser<UpdateDependencies_Args> _parser = new pb::MessageParser<UpdateDependencies_Args>(() => new UpdateDependencies_Args());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDependencies_Args> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDependencies_Args() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDependencies_Args(UpdateDependencies_Args other) : this() {
      manifestPath_ = other.manifestPath_;
      vendor_ = other.vendor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDependencies_Args Clone() {
      return new UpdateDependencies_Args(this);
    }

    /// <summary>Field number for the "manifest_path" field.</summary>
    public const int ManifestPathFieldNumber = 1;
    private string manifestPath_ = "";
    /// <summary>
    /// Path to the manifest file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ManifestPath {
      get { return manifestPath_; }
      set {
        manifestPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 2;
    private bool vendor_;
    /// <summary>
    /// Flag to vendor dependencies locally.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vendor {
      get { return vendor_; }
      set {
        vendor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDependencies_Args);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDependencies_Args other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManifestPath != other.ManifestPath) return false;
      if (Vendor != other.Vendor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManifestPath.Length != 0) hash ^= ManifestPath.GetHashCode();
      if (Vendor != false) hash ^= Vendor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManifestPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ManifestPath);
      }
      if (Vendor != false) {
        output.WriteRawTag(16);
        output.WriteBool(Vendor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManifestPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ManifestPath);
      }
      if (Vendor != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDependencies_Args other) {
      if (other == null) {
        return;
      }
      if (other.ManifestPath.Length != 0) {
        ManifestPath = other.ManifestPath;
      }
      if (other.Vendor != false) {
        Vendor = other.Vendor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ManifestPath = input.ReadString();
            break;
          }
          case 16: {
            Vendor = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for update dependencies response.
  /// </summary>
  public sealed partial class UpdateDependencies_Result : pb::IMessage<UpdateDependencies_Result> {
    private static readonly pb::MessageParser<UpdateDependencies_Result> _parser = new pb::MessageParser<UpdateDependencies_Result>(() => new UpdateDependencies_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDependencies_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDependencies_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDependencies_Result(UpdateDependencies_Result other) : this() {
      externalPkgs_ = other.externalPkgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDependencies_Result Clone() {
      return new UpdateDependencies_Result(this);
    }

    /// <summary>Field number for the "external_pkgs" field.</summary>
    public const int ExternalPkgsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KclLib.API.ExternalPkg> _repeated_externalPkgs_codec
        = pb::FieldCodec.ForMessage(26, global::KclLib.API.ExternalPkg.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.ExternalPkg> externalPkgs_ = new pbc::RepeatedField<global::KclLib.API.ExternalPkg>();
    /// <summary>
    /// List of external packages updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.ExternalPkg> ExternalPkgs {
      get { return externalPkgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDependencies_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDependencies_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!externalPkgs_.Equals(other.externalPkgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= externalPkgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      externalPkgs_.WriteTo(output, _repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += externalPkgs_.CalculateSize(_repeated_externalPkgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDependencies_Result other) {
      if (other == null) {
        return;
      }
      externalPkgs_.Add(other.externalPkgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            externalPkgs_.AddEntriesFrom(input, _repeated_externalPkgs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a KCL type.
  /// </summary>
  public sealed partial class KclType : pb::IMessage<KclType> {
    private static readonly pb::MessageParser<KclType> _parser = new pb::MessageParser<KclType>(() => new KclType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KclType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KclType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KclType(KclType other) : this() {
      type_ = other.type_;
      unionTypes_ = other.unionTypes_.Clone();
      default_ = other.default_;
      schemaName_ = other.schemaName_;
      schemaDoc_ = other.schemaDoc_;
      properties_ = other.properties_.Clone();
      required_ = other.required_.Clone();
      key_ = other.key_ != null ? other.key_.Clone() : null;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      line_ = other.line_;
      decorators_ = other.decorators_.Clone();
      filename_ = other.filename_;
      pkgPath_ = other.pkgPath_;
      description_ = other.description_;
      examples_ = other.examples_.Clone();
      baseSchema_ = other.baseSchema_ != null ? other.baseSchema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KclType Clone() {
      return new KclType(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Type name (e.g., schema, dict, list, str, int, float, bool, any, union, number_multiplier).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "union_types" field.</summary>
    public const int UnionTypesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KclLib.API.KclType> _repeated_unionTypes_codec
        = pb::FieldCodec.ForMessage(18, global::KclLib.API.KclType.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.KclType> unionTypes_ = new pbc::RepeatedField<global::KclLib.API.KclType>();
    /// <summary>
    /// Union types if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.KclType> UnionTypes {
      get { return unionTypes_; }
    }

    /// <summary>Field number for the "default" field.</summary>
    public const int DefaultFieldNumber = 3;
    private string default_ = "";
    /// <summary>
    /// Default value of the type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Default {
      get { return default_; }
      set {
        default_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema_name" field.</summary>
    public const int SchemaNameFieldNumber = 4;
    private string schemaName_ = "";
    /// <summary>
    /// Name of the schema if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema_doc" field.</summary>
    public const int SchemaDocFieldNumber = 5;
    private string schemaDoc_ = "";
    /// <summary>
    /// Documentation for the schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaDoc {
      get { return schemaDoc_; }
      set {
        schemaDoc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 6;
    private static readonly pbc::MapField<string, global::KclLib.API.KclType>.Codec _map_properties_codec
        = new pbc::MapField<string, global::KclLib.API.KclType>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.KclType.Parser), 50);
    private readonly pbc::MapField<string, global::KclLib.API.KclType> properties_ = new pbc::MapField<string, global::KclLib.API.KclType>();
    /// <summary>
    /// Properties of the schema as a map with property name as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.KclType> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_required_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> required_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of required schema properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Required {
      get { return required_; }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 8;
    private global::KclLib.API.KclType key_;
    /// <summary>
    /// Key type if the KclType is a dictionary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.KclType Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 9;
    private global::KclLib.API.KclType item_;
    /// <summary>
    /// Item type if the KclType is a list or dictionary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.KclType Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 10;
    private int line_;
    /// <summary>
    /// Line number where the type is defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "decorators" field.</summary>
    public const int DecoratorsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::KclLib.API.Decorator> _repeated_decorators_codec
        = pb::FieldCodec.ForMessage(90, global::KclLib.API.Decorator.Parser);
    private readonly pbc::RepeatedField<global::KclLib.API.Decorator> decorators_ = new pbc::RepeatedField<global::KclLib.API.Decorator>();
    /// <summary>
    /// List of decorators for the schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KclLib.API.Decorator> Decorators {
      get { return decorators_; }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 12;
    private string filename_ = "";
    /// <summary>
    /// Absolute path of the file where the attribute is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pkg_path" field.</summary>
    public const int PkgPathFieldNumber = 13;
    private string pkgPath_ = "";
    /// <summary>
    /// Path of the package where the attribute is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PkgPath {
      get { return pkgPath_; }
      set {
        pkgPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 14;
    private string description_ = "";
    /// <summary>
    /// Documentation for the attribute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "examples" field.</summary>
    public const int ExamplesFieldNumber = 15;
    private static readonly pbc::MapField<string, global::KclLib.API.Example>.Codec _map_examples_codec
        = new pbc::MapField<string, global::KclLib.API.Example>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::KclLib.API.Example.Parser), 122);
    private readonly pbc::MapField<string, global::KclLib.API.Example> examples_ = new pbc::MapField<string, global::KclLib.API.Example>();
    /// <summary>
    /// Map of examples with example name as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::KclLib.API.Example> Examples {
      get { return examples_; }
    }

    /// <summary>Field number for the "base_schema" field.</summary>
    public const int BaseSchemaFieldNumber = 16;
    private global::KclLib.API.KclType baseSchema_;
    /// <summary>
    /// Base schema if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KclLib.API.KclType BaseSchema {
      get { return baseSchema_; }
      set {
        baseSchema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KclType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KclType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!unionTypes_.Equals(other.unionTypes_)) return false;
      if (Default != other.Default) return false;
      if (SchemaName != other.SchemaName) return false;
      if (SchemaDoc != other.SchemaDoc) return false;
      if (!Properties.Equals(other.Properties)) return false;
      if(!required_.Equals(other.required_)) return false;
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (Line != other.Line) return false;
      if(!decorators_.Equals(other.decorators_)) return false;
      if (Filename != other.Filename) return false;
      if (PkgPath != other.PkgPath) return false;
      if (Description != other.Description) return false;
      if (!Examples.Equals(other.Examples)) return false;
      if (!object.Equals(BaseSchema, other.BaseSchema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= unionTypes_.GetHashCode();
      if (Default.Length != 0) hash ^= Default.GetHashCode();
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (SchemaDoc.Length != 0) hash ^= SchemaDoc.GetHashCode();
      hash ^= Properties.GetHashCode();
      hash ^= required_.GetHashCode();
      if (key_ != null) hash ^= Key.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      hash ^= decorators_.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (PkgPath.Length != 0) hash ^= PkgPath.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Examples.GetHashCode();
      if (baseSchema_ != null) hash ^= BaseSchema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      unionTypes_.WriteTo(output, _repeated_unionTypes_codec);
      if (Default.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Default);
      }
      if (SchemaName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SchemaName);
      }
      if (SchemaDoc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SchemaDoc);
      }
      properties_.WriteTo(output, _map_properties_codec);
      required_.WriteTo(output, _repeated_required_codec);
      if (key_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Key);
      }
      if (item_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Item);
      }
      if (Line != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Line);
      }
      decorators_.WriteTo(output, _repeated_decorators_codec);
      if (Filename.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Filename);
      }
      if (PkgPath.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PkgPath);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Description);
      }
      examples_.WriteTo(output, _map_examples_codec);
      if (baseSchema_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BaseSchema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += unionTypes_.CalculateSize(_repeated_unionTypes_codec);
      if (Default.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Default);
      }
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (SchemaDoc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaDoc);
      }
      size += properties_.CalculateSize(_map_properties_codec);
      size += required_.CalculateSize(_repeated_required_codec);
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      size += decorators_.CalculateSize(_repeated_decorators_codec);
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (PkgPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PkgPath);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += examples_.CalculateSize(_map_examples_codec);
      if (baseSchema_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BaseSchema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KclType other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      unionTypes_.Add(other.unionTypes_);
      if (other.Default.Length != 0) {
        Default = other.Default;
      }
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      if (other.SchemaDoc.Length != 0) {
        SchemaDoc = other.SchemaDoc;
      }
      properties_.Add(other.properties_);
      required_.Add(other.required_);
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::KclLib.API.KclType();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::KclLib.API.KclType();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      decorators_.Add(other.decorators_);
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.PkgPath.Length != 0) {
        PkgPath = other.PkgPath;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      examples_.Add(other.examples_);
      if (other.baseSchema_ != null) {
        if (baseSchema_ == null) {
          BaseSchema = new global::KclLib.API.KclType();
        }
        BaseSchema.MergeFrom(other.BaseSchema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            unionTypes_.AddEntriesFrom(input, _repeated_unionTypes_codec);
            break;
          }
          case 26: {
            Default = input.ReadString();
            break;
          }
          case 34: {
            SchemaName = input.ReadString();
            break;
          }
          case 42: {
            SchemaDoc = input.ReadString();
            break;
          }
          case 50: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
          case 58: {
            required_.AddEntriesFrom(input, _repeated_required_codec);
            break;
          }
          case 66: {
            if (key_ == null) {
              Key = new global::KclLib.API.KclType();
            }
            input.ReadMessage(Key);
            break;
          }
          case 74: {
            if (item_ == null) {
              Item = new global::KclLib.API.KclType();
            }
            input.ReadMessage(Item);
            break;
          }
          case 80: {
            Line = input.ReadInt32();
            break;
          }
          case 90: {
            decorators_.AddEntriesFrom(input, _repeated_decorators_codec);
            break;
          }
          case 98: {
            Filename = input.ReadString();
            break;
          }
          case 106: {
            PkgPath = input.ReadString();
            break;
          }
          case 114: {
            Description = input.ReadString();
            break;
          }
          case 122: {
            examples_.AddEntriesFrom(input, _map_examples_codec);
            break;
          }
          case 130: {
            if (baseSchema_ == null) {
              BaseSchema = new global::KclLib.API.KclType();
            }
            input.ReadMessage(BaseSchema);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing a decorator in KCL.
  /// </summary>
  public sealed partial class Decorator : pb::IMessage<Decorator> {
    private static readonly pb::MessageParser<Decorator> _parser = new pb::MessageParser<Decorator>(() => new Decorator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decorator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decorator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decorator(Decorator other) : this() {
      name_ = other.name_;
      arguments_ = other.arguments_.Clone();
      keywords_ = other.keywords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decorator Clone() {
      return new Decorator(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the decorator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_arguments_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> arguments_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Arguments for the decorator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Arguments {
      get { return arguments_; }
    }

    /// <summary>Field number for the "keywords" field.</summary>
    public const int KeywordsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_keywords_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> keywords_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Keyword arguments for the decorator as a map with keyword name as key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Keywords {
      get { return keywords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decorator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decorator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      if (!Keywords.Equals(other.Keywords)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= arguments_.GetHashCode();
      hash ^= Keywords.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
      keywords_.WriteTo(output, _map_keywords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      size += keywords_.CalculateSize(_map_keywords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decorator other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      arguments_.Add(other.arguments_);
      keywords_.Add(other.keywords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
          case 26: {
            keywords_.AddEntriesFrom(input, _map_keywords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message representing an example in KCL.
  /// </summary>
  public sealed partial class Example : pb::IMessage<Example> {
    private static readonly pb::MessageParser<Example> _parser = new pb::MessageParser<Example>(() => new Example());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Example> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KclLib.API.SpecReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Example() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Example(Example other) : this() {
      summary_ = other.summary_;
      description_ = other.description_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Example Clone() {
      return new Example(this);
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 1;
    private string summary_ = "";
    /// <summary>
    /// Short description for the example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Summary {
      get { return summary_; }
      set {
        summary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Long description for the example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// Embedded literal example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Example);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Example other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Summary != other.Summary) return false;
      if (Description != other.Description) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Summary.Length != 0) hash ^= Summary.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Summary.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Summary);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Summary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Summary);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Example other) {
      if (other == null) {
        return;
      }
      if (other.Summary.Length != 0) {
        Summary = other.Summary;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Summary = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
