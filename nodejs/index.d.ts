/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Message representing an external package for KCL.
 * kcl main.k -E pkg_name=pkg_path
 */
export interface ExternalPkg {
  /** Name of the package. */
  pkgName: string
  /** Path of the package. */
  pkgPath: string
}
/**
 * Message representing a key-value argument for KCL.
 * kcl main.k -D name=value
 */
export interface Argument {
  /** Name of the argument. */
  name: string
  /** Value of the argument. */
  value: string
}
/** Message representing an error. */
export interface Error {
  /** Level of the error (e.g., "Error", "Warning"). */
  level: string
  /** Error code. (e.g., "E1001") */
  code: string
  /** List of error messages. */
  messages: Array<Message>
}
/** Message representing a detailed error message with a position. */
export interface Message {
  /** The error message text. */
  msg: string
  /** The position in the source code where the error occurred. */
  pos?: Position
}
/** Message for ping response. */
export interface PingResult {
  /** Value received in the ping response. */
  value: string
}
/** Message for list method response. */
export interface ListMethodResult {
  /** List of available method names. */
  methodNameList: Array<string>
}
/** Message for parse file response. */
export interface ParseFileResult {
  /** Abstract Syntax Tree (AST) in JSON format. */
  astJson: string
  /** File dependency paths. */
  deps: Array<string>
  /** List of parse errors. */
  errors: Array<Error>
}
/** Message for parse program response. */
export interface ParseProgramResult {
  /** Abstract Syntax Tree (AST) in JSON format. */
  astJson: string
  /** Returns the files in the order they should be compiled. */
  paths: Array<string>
  /** List of parse errors. */
  errors: Array<Error>
}
/** Message for load package response. */
export interface LoadPackageResult {
  /** JSON string value */
  program: string
  /** Returns the files in the order they should be compiled */
  paths: Array<string>
  /** Parse errors */
  parseErrors: Array<Error>
  /** Type errors */
  typeErrors: Array<Error>
  /** Map key is the ScopeIndex json string. */
  scopes: Record<string, Scope>
  /** Map key is the SymbolIndex json string. */
  symbols: Record<string, symbol>
  /** Map key is the AST index UUID string. */
  nodeSymbolMap: Record<string, SymbolIndex>
  /** Map key is the SymbolIndex json string. */
  symbolNodeMap: Record<string, string>
  /** Map key is the fully_qualified_name e.g. `pkg.Name` */
  fullyQualifiedNameMap: Record<string, SymbolIndex>
  /** Map key is the package path. */
  pkgScopeMap: Record<string, ScopeIndex>
}
/** Message for list options response. */
export interface ListOptionsResult {
  /** Returns the files in the order they should be compiled */
  options: Array<OptionHelp>
}
/** Message representing a help option. */
export interface OptionHelp {
  /** Name of the option. */
  name: string
  /** Type of the option. */
  type: string
  /** Flag indicating if the option is required. */
  required: boolean
  /** Default value of the option. */
  defaultValue: string
  /** Help text for the option. */
  help: string
}
/** Message representing a symbol in KCL. */
export interface Symbol {
  /** Type of the symbol. */
  ty?: string
  /** Name of the symbol. */
  name: string
  /** Owner of the symbol. */
  owner?: SymbolIndex
  /** Definition of the symbol. */
  def?: SymbolIndex
  /** Attributes of the symbol. */
  attrs: Array<SymbolIndex>
  /** Flag indicating if the symbol is global. */
  isGlobal: boolean
}
/** Message representing a scope in KCL. */
export interface Scope {
  /** Type of the scope. */
  kind: string
  /** Parent scope. */
  parent?: ScopeIndex
  /** Owner of the scope. */
  owner?: SymbolIndex
  /** Children of the scope. */
  children: Array<ScopeIndex>
  /** Definitions in the scope. */
  defs: Array<SymbolIndex>
}
/** Message representing a symbol index. */
export interface SymbolIndex {
  i: number
  g: number
  kind: string
}
/** Message representing a scope index. */
export interface ScopeIndex {
  i: number
  g: number
  kind: string
}
/** Message for execute program response. */
export interface ExecProgramResult {
  /** Result in JSON format. */
  jsonResult: string
  /** Result in YAML format. */
  yamlResult: string
  /** Log message from execution. */
  logMessage: string
  /** Error message from execution. */
  errMessage: string
}
/** Message for build program response. */
export interface BuildProgramResult {
  /** Path of the built program. */
  path: string
}
/** Message for format code response. */
export interface FormatCodeResult {
  /** Formatted code as bytes. */
  formatted: string
}
/** Message for format file path response. */
export interface FormatPathResult {
  /** List of changed file paths. */
  changedPaths: Array<string>
}
/** Message for lint file path response. */
export interface LintPathResult {
  /** List of lint results. */
  results: Array<string>
}
/** Message for override file response. */
export interface OverrideFileResult {
  /** Result of the override operation. */
  result: boolean
  parseErrors: Array<Error>
}
/** Message for list variables options. */
export interface ListVariablesOptions {
  /** Flag to merge program configuration. */
  mergeProgram: boolean
}
/** Message for list variables response. */
export interface ListVariablesResult {
  /** Map of variable lists by file. */
  variables: Record<string, Array<Variable>>
  /** List of unsupported codes. */
  unsupportedCodes: Array<string>
  /** List of parse errors encountered. */
  parseErrors: Array<Error>
}
/** Message representing a variable. */
export interface Variable {
  /** Value of the variable. */
  value: string
  /** Type name of the variable. */
  typeName: string
  /** Operation symbol associated with the variable. */
  opSym: string
  /** List items if the variable is a list. */
  listItems: Array<Variable>
  /** Dictionary entries if the variable is a dictionary. */
  dictEntries: Record<string, Variable>
}
export interface GetSchemaTypeMappingResult {
  /** Map of schema type mappings. */
  schemaTypeMapping: Record<string, string>
}
/** Message for validate code response. */
export interface ValidateCodeResult {
  /** Flag indicating if validation was successful. */
  success: boolean
  /** Error message from validation. */
  errMessage: string
}
/** Message representing a position in the source code. */
export interface Position {
  /** Line number. */
  line: number
  /** Column number. */
  column: number
  /** Filename the position refers to. */
  filename: string
}
/** Message for load settings files response. */
export interface LoadSettingsFilesResult {
  /** KCL CLI configuration. */
  kclCliConfigs?: CliConfig
  /** List of KCL options as key-value pairs. */
  kclOptions: Array<KeyValuePair>
}
/** Message representing KCL CLI configuration. */
export interface CliConfig {
  /** List of files. */
  files: Array<string>
  /** Output path. */
  output: string
  /** List of overrides. */
  overrides: Array<string>
  /** Path selectors. */
  pathSelector: Array<string>
  /** Flag for strict range check. */
  strictRangeCheck: boolean
  /** Flag to disable none values. */
  disableNone: boolean
  /** Verbose level. */
  verbose: number
  /** Debug flag. */
  debug: boolean
  /** Flag to sort keys in YAML/JSON results. */
  sortKeys: boolean
  /** Flag to show hidden attributes. */
  showHidden: boolean
  /** Flag to include schema type path in results. */
  includeSchemaTypePath: boolean
  /** Flag for fast evaluation. */
  fastEval: boolean
}
/** Message representing a key-value pair. */
export interface KeyValuePair {
  /** Key of the pair. */
  key: string
  /** Value of the pair. */
  value: string
}
export interface RenameResult {
  /** the file paths got changed */
  changedFiles: Array<string>
}
export interface RenameCodeResult {
  /** the changed code. a <filename>:<code> map */
  changedCodes: Record<string, string>
}
/** Message for test response. */
export interface TestResult {
  /** List of test case information. */
  info: Array<TestCaseInfo>
}
/** Message representing information about a single test case. */
export interface TestCaseInfo {
  /** Name of the test case. */
  name: string
  /** Error message if any. */
  error: string
  /** Duration of the test case in microseconds. */
  duration: number
  /** Log message from the test case. */
  logMessage: string
}
/** Message representing a KCL type. */
export interface KclType {
  /** schema, dict, list, str, int, float, bool, any, union, number_multiplier */
  type: string
  /** union types */
  unionTypes: Array<KclType>
  /** default value */
  default: string
  /** schema name */
  schemaName: string
  /** schema doc */
  schemaDoc: string
  /** schema properties */
  properties: Record<string, KclType>
  /** required schema properties, [property_name1, property_name2] */
  required: Array<string>
  /** dict key type */
  key: KclType
  /** dict/list item type */
  item: KclType
  line: number
  /** schema decorators */
  decorators: Array<Decorator>
  /** `filename` represents the absolute path of the file name where the attribute is located. */
  filename: string
  /** `pkg_path` represents the path name of the package where the attribute is located. */
  pkgPath: string
  /** `description` represents the document of the attribute. */
  description: string
  /** A map object to hold examples, the key is the example name. */
  examples: Record<string, Example>
}
/** Message representing a decorator in KCL. */
export interface Decorator {
  /** Name of the decorator. */
  name: string
  /** Arguments for the decorator. */
  arguments: Array<string>
  /** Keyword arguments for the decorator as a map with keyword name as key. */
  keywords: Record<string, string>
}
/** Message representing an example in KCL. */
export interface Example {
  /** Short description for the example. */
  summary: string
  /** Long description for the example. */
  description: string
  /** Embedded literal example. */
  value: string
}
/** Message for update dependencies response. */
export interface UpdateDependenciesResult {
  /** List of external packages updated. */
  externalPkgs: Array<ExternalPkg>
}
export interface GetVersionResult {
  version: string
  checksum: string
  gitSha: string
  versionInfo: string
}
/**
 * Provides users with the ability to parse KCL program and semantic
 * model information including symbols, types, definitions, etc.
 */
export declare function loadPackage(args: LoadPackageArgs): LoadPackageResult
/** Execute KCL file with arguments and return the JSON/YAML result. */
export declare function execProgram(args: ExecProgramArgs): ExecProgramResult
/** Parse KCL program with entry files. */
export declare function parseProgram(args: ParseProgramArgs): ParseProgramResult
/**
 * Parse KCL single file to Module AST JSON string with import dependencies
 * and parse errors.
 */
export declare function parseFile(args: ParseFileArgs): ParseFileResult
/** Provides users with the ability to parse kcl program and get all option information. */
export declare function listOptions(args: ListOptionsArgs): ListOptionsResult
/**
 * Provides users with the ability to parse KCL program and get
 * all variables by specs.
 */
export declare function listVariables(args: ListVariablesArgs): ListVariablesResult
/**
 * Override KCL file with arguments.
 * See [https://www.kcl-lang.io/docs/user_docs/guides/automation](https://www.kcl-lang.io/docs/user_docs/guides/automation)
 * for more override spec guide.
 */
export declare function overrideFile(args: OverrideFileArgs): OverrideFileResult
/** Get schema type mapping. */
export declare function getSchemaTypeMapping(args: GetSchemaTypeMappingArgs): GetSchemaTypeMappingResult
/** Format KCL file or directory path contains KCL files and returns the changed file paths. */
export declare function formatCode(args: FormatCodeArgs): FormatCodeResult
/** Format KCL file or directory path contains KCL files and returns the changed file paths. */
export declare function formatPath(args: FormatPathArgs): FormatPathResult
/** Lint files and return error messages including errors and warnings. */
export declare function lintPath(args: LintPathArgs): LintPathResult
/** Validate code using schema and data strings. */
export declare function validateCode(args: ValidateCodeArgs): ValidateCodeResult
/** Load the setting file config defined in `kcl.yaml` */
export declare function loadSettingsFiles(args: LoadSettingsFilesArgs): LoadSettingsFilesResult
/**
 * Rename all the occurrences of the target symbol in the files. This API will rewrite files if they contain symbols to be renamed.
 * Return the file paths that got changed.
 */
export declare function rename(args: RenameArgs): RenameResult
/**
 * Rename all the occurrences of the target symbol and return the modified code if any code has been changed. This API won't
 * rewrite files but return the changed code.
 */
export declare function renameCode(args: RenameCodeArgs): RenameCodeResult
/** Test KCL packages with test arguments. */
export declare function test(args: TestArgs): TestResult
/**
 * Download and update dependencies defined in the `kcl.mod` file and return the
 * external package name and location list.
 */
export declare function updateDependencies(args: UpdateDependenciesArgs): UpdateDependenciesResult
/** Return the KCL service version information. */
export declare function getVersion(): GetVersionResult
/**
 * Message for load package request arguments.
 * - paths: List of KCL files.
 * - sources: List of KCL codes.
 * - resolve_ast: Flag indicating whether to resolve AST.
 * - load_builtin: Flag indicating whether to load built-in modules.
 * - with_ast_index: Flag indicating whether to include AST index.
 */
export declare class LoadPackageArgs {
  constructor(
    paths: Array<string>,
    sources: Array<string>,
    resolveAst?: boolean | undefined | null,
    loadBuiltin?: boolean | undefined | null,
    withAstIndex?: boolean | undefined | null,
  )
}
/** Message for execute program request arguments. */
export declare class ExecProgramArgs {
  constructor(
    paths: Array<string>,
    sources?: Array<string> | undefined | null,
    workDir?: string | undefined | null,
    args?: Array<Argument> | undefined | null,
    overrides?: Array<string> | undefined | null,
    strictRangeCheck?: boolean | undefined | null,
    disableNone?: boolean | undefined | null,
    verbose?: number | undefined | null,
    debug?: number | undefined | null,
    sortKeys?: boolean | undefined | null,
    externalPkgs?: Array<ExternalPkg> | undefined | null,
    compileOnly?: boolean | undefined | null,
    pathSelector?: Array<string> | undefined | null,
    fastEval?: boolean | undefined | null,
  )
}
export declare class ParseProgramArgs {
  constructor(
    paths: Array<string>,
    sources?: Array<string> | undefined | null,
    externalPkgs?: Array<ExternalPkg> | undefined | null,
  )
}
export declare class ParseFileArgs {
  constructor(path: string, source?: string | undefined | null, externalPkgs?: Array<ExternalPkg> | undefined | null)
}
export declare class ListOptionsArgs {
  constructor(paths: Array<string>, sources?: Array<string> | undefined | null)
}
export declare class ListVariablesArgs {
  constructor(files: Array<string>, specs: Array<string>, opts?: ListVariablesOptions | undefined | null)
}
export declare class OverrideFileArgs {
  constructor(file: string, specs: Array<string>, importPaths: Array<string>)
}
export declare class GetSchemaTypeMappingArgs {
  constructor(paths: Array<string>, workDir?: string | undefined | null, schemaName?: string | undefined | null)
}
export declare class FormatCodeArgs {
  constructor(source: string)
}
export declare class FormatPathArgs {
  constructor(path: string)
}
export declare class LintPathArgs {
  constructor(paths: Array<string>)
}
export declare class ValidateCodeArgs {
  constructor(
    datafile?: string | undefined | null,
    data?: string | undefined | null,
    file?: string | undefined | null,
    code?: string | undefined | null,
    schema?: string | undefined | null,
    attributeName?: string | undefined | null,
    format?: string | undefined | null,
    externalPkgs?: Array<ExternalPkg> | undefined | null,
  )
}
export declare class LoadSettingsFilesArgs {
  constructor(workDir: string, files: Array<string>)
}
export declare class RenameArgs {
  constructor(packageRoot: string, symbolPath: string, filePaths: Array<string>, newName: string)
}
export declare class RenameCodeArgs {
  constructor(packageRoot: string, symbolPath: string, sourceCodes: Record<string, string>, newName: string)
}
export declare class TestArgs {
  constructor(
    pkgList: Array<string>,
    failFast?: boolean | undefined | null,
    runRegexp?: string | undefined | null,
    workDir?: string | undefined | null,
    paths?: Array<string> | undefined | null,
  )
}
export declare class UpdateDependenciesArgs {
  constructor(manifestPath: string, vendor: boolean)
}
