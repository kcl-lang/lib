// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spec.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.kcl.api;

@kotlin.jvm.JvmName("-initializebuildProgramArgs")
public inline fun buildProgramArgs(block: com.kcl.api.BuildProgram_ArgsKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.BuildProgram_Args =
  com.kcl.api.BuildProgram_ArgsKt.Dsl._create(com.kcl.api.Spec.BuildProgram_Args.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message for build program request arguments.
 * ```
 *
 * Protobuf type `com.kcl.api.BuildProgram_Args`
 */
public object BuildProgram_ArgsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.kcl.api.Spec.BuildProgram_Args.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.kcl.api.Spec.BuildProgram_Args.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.kcl.api.Spec.BuildProgram_Args = _builder.build()

    /**
     * ```
     * Arguments for executing the program.
     * ```
     *
     * `.com.kcl.api.ExecProgram_Args exec_args = 1;`
     */
    public var execArgs: com.kcl.api.Spec.ExecProgram_Args
      @JvmName("getExecArgs")
      get() = _builder.execArgs
      @JvmName("setExecArgs")
      set(value) {
        _builder.execArgs = value
      }
    /**
     * ```
     * Arguments for executing the program.
     * ```
     *
     * `.com.kcl.api.ExecProgram_Args exec_args = 1;`
     */
    public fun clearExecArgs() {
      _builder.clearExecArgs()
    }
    /**
     * ```
     * Arguments for executing the program.
     * ```
     *
     * `.com.kcl.api.ExecProgram_Args exec_args = 1;`
     * @return Whether the execArgs field is set.
     */
    public fun hasExecArgs(): kotlin.Boolean {
      return _builder.hasExecArgs()
    }

    public val BuildProgram_ArgsKt.Dsl.execArgsOrNull: com.kcl.api.Spec.ExecProgram_Args?
      get() = _builder.execArgsOrNull

    /**
     * ```
     * Output path.
     * ```
     *
     * `string output = 2;`
     */
    public var output: kotlin.String
      @JvmName("getOutput")
      get() = _builder.output
      @JvmName("setOutput")
      set(value) {
        _builder.output = value
      }
    /**
     * ```
     * Output path.
     * ```
     *
     * `string output = 2;`
     */
    public fun clearOutput() {
      _builder.clearOutput()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.kcl.api.Spec.BuildProgram_Args.copy(block: `com.kcl.api`.BuildProgram_ArgsKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.BuildProgram_Args =
  `com.kcl.api`.BuildProgram_ArgsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.kcl.api.Spec.BuildProgram_ArgsOrBuilder.execArgsOrNull: com.kcl.api.Spec.ExecProgram_Args?
  get() = if (hasExecArgs()) getExecArgs() else null

