// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spec.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.kcl.api;

@kotlin.jvm.JvmName("-initializeexternalPkg")
public inline fun externalPkg(block: com.kcl.api.ExternalPkgKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.ExternalPkg =
  com.kcl.api.ExternalPkgKt.Dsl._create(com.kcl.api.Spec.ExternalPkg.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message representing an external package for KCL.
 * kcl main.k -E pkg_name=pkg_path
 * ```
 *
 * Protobuf type `com.kcl.api.ExternalPkg`
 */
public object ExternalPkgKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.kcl.api.Spec.ExternalPkg.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.kcl.api.Spec.ExternalPkg.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.kcl.api.Spec.ExternalPkg = _builder.build()

    /**
     * ```
     * Name of the package.
     * ```
     *
     * `string pkg_name = 1;`
     */
    public var pkgName: kotlin.String
      @JvmName("getPkgName")
      get() = _builder.pkgName
      @JvmName("setPkgName")
      set(value) {
        _builder.pkgName = value
      }
    /**
     * ```
     * Name of the package.
     * ```
     *
     * `string pkg_name = 1;`
     */
    public fun clearPkgName() {
      _builder.clearPkgName()
    }

    /**
     * ```
     * Path of the package.
     * ```
     *
     * `string pkg_path = 2;`
     */
    public var pkgPath: kotlin.String
      @JvmName("getPkgPath")
      get() = _builder.pkgPath
      @JvmName("setPkgPath")
      set(value) {
        _builder.pkgPath = value
      }
    /**
     * ```
     * Path of the package.
     * ```
     *
     * `string pkg_path = 2;`
     */
    public fun clearPkgPath() {
      _builder.clearPkgPath()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.kcl.api.Spec.ExternalPkg.copy(block: `com.kcl.api`.ExternalPkgKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.ExternalPkg =
  `com.kcl.api`.ExternalPkgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

