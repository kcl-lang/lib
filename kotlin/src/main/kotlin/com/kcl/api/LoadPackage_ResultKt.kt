// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spec.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.kcl.api;

@kotlin.jvm.JvmName("-initializeloadPackageResult")
public inline fun loadPackageResult(block: com.kcl.api.LoadPackage_ResultKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.LoadPackage_Result =
  com.kcl.api.LoadPackage_ResultKt.Dsl._create(com.kcl.api.Spec.LoadPackage_Result.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message for load package response.
 * ```
 *
 * Protobuf type `com.kcl.api.LoadPackage_Result`
 */
public object LoadPackage_ResultKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.kcl.api.Spec.LoadPackage_Result.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.kcl.api.Spec.LoadPackage_Result.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.kcl.api.Spec.LoadPackage_Result = _builder.build()

    /**
     * ```
     * Program Abstract Syntax Tree (AST) in JSON format.
     * ```
     *
     * `string program = 1;`
     */
    public var program: kotlin.String
      @JvmName("getProgram")
      get() = _builder.program
      @JvmName("setProgram")
      set(value) {
        _builder.program = value
      }
    /**
     * ```
     * Program Abstract Syntax Tree (AST) in JSON format.
     * ```
     *
     * `string program = 1;`
     */
    public fun clearProgram() {
      _builder.clearProgram()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PathsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Returns the files in the order they should be compiled.
     * ```
     *
     * `repeated string paths = 2;`
     * @return A list containing the paths.
     */
    public val paths: com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.pathsList
      )
    /**
     * ```
     * Returns the files in the order they should be compiled.
     * ```
     *
     * `repeated string paths = 2;`
     * @param value The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.add(value: kotlin.String) {
      _builder.addPaths(value)
    }
    /**
     * ```
     * Returns the files in the order they should be compiled.
     * ```
     *
     * `repeated string paths = 2;`
     * @param value The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * Returns the files in the order they should be compiled.
     * ```
     *
     * `repeated string paths = 2;`
     * @param values The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllPaths(values)
    }
    /**
     * ```
     * Returns the files in the order they should be compiled.
     * ```
     *
     * `repeated string paths = 2;`
     * @param values The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * Returns the files in the order they should be compiled.
     * ```
     *
     * `repeated string paths = 2;`
     * @param index The index to set the value at.
     * @param value The paths to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPaths")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setPaths(index, value)
    }/**
     * ```
     * Returns the files in the order they should be compiled.
     * ```
     *
     * `repeated string paths = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.clear() {
      _builder.clearPaths()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ParseErrorsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * List of parse errors.
     * ```
     *
     * `repeated .com.kcl.api.Error parse_errors = 3;`
     */
     public val parseErrors: com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, ParseErrorsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.parseErrorsList
      )
    /**
     * ```
     * List of parse errors.
     * ```
     *
     * `repeated .com.kcl.api.Error parse_errors = 3;`
     * @param value The parseErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addParseErrors")
    public fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, ParseErrorsProxy>.add(value: com.kcl.api.Spec.Error) {
      _builder.addParseErrors(value)
    }
    /**
     * ```
     * List of parse errors.
     * ```
     *
     * `repeated .com.kcl.api.Error parse_errors = 3;`
     * @param value The parseErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignParseErrors")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, ParseErrorsProxy>.plusAssign(value: com.kcl.api.Spec.Error) {
      add(value)
    }
    /**
     * ```
     * List of parse errors.
     * ```
     *
     * `repeated .com.kcl.api.Error parse_errors = 3;`
     * @param values The parseErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllParseErrors")
    public fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, ParseErrorsProxy>.addAll(values: kotlin.collections.Iterable<com.kcl.api.Spec.Error>) {
      _builder.addAllParseErrors(values)
    }
    /**
     * ```
     * List of parse errors.
     * ```
     *
     * `repeated .com.kcl.api.Error parse_errors = 3;`
     * @param values The parseErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllParseErrors")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, ParseErrorsProxy>.plusAssign(values: kotlin.collections.Iterable<com.kcl.api.Spec.Error>) {
      addAll(values)
    }
    /**
     * ```
     * List of parse errors.
     * ```
     *
     * `repeated .com.kcl.api.Error parse_errors = 3;`
     * @param index The index to set the value at.
     * @param value The parseErrors to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setParseErrors")
    public operator fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, ParseErrorsProxy>.set(index: kotlin.Int, value: com.kcl.api.Spec.Error) {
      _builder.setParseErrors(index, value)
    }
    /**
     * ```
     * List of parse errors.
     * ```
     *
     * `repeated .com.kcl.api.Error parse_errors = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearParseErrors")
    public fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, ParseErrorsProxy>.clear() {
      _builder.clearParseErrors()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TypeErrorsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * List of type errors.
     * ```
     *
     * `repeated .com.kcl.api.Error type_errors = 4;`
     */
     public val typeErrors: com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, TypeErrorsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.typeErrorsList
      )
    /**
     * ```
     * List of type errors.
     * ```
     *
     * `repeated .com.kcl.api.Error type_errors = 4;`
     * @param value The typeErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTypeErrors")
    public fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, TypeErrorsProxy>.add(value: com.kcl.api.Spec.Error) {
      _builder.addTypeErrors(value)
    }
    /**
     * ```
     * List of type errors.
     * ```
     *
     * `repeated .com.kcl.api.Error type_errors = 4;`
     * @param value The typeErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTypeErrors")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, TypeErrorsProxy>.plusAssign(value: com.kcl.api.Spec.Error) {
      add(value)
    }
    /**
     * ```
     * List of type errors.
     * ```
     *
     * `repeated .com.kcl.api.Error type_errors = 4;`
     * @param values The typeErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTypeErrors")
    public fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, TypeErrorsProxy>.addAll(values: kotlin.collections.Iterable<com.kcl.api.Spec.Error>) {
      _builder.addAllTypeErrors(values)
    }
    /**
     * ```
     * List of type errors.
     * ```
     *
     * `repeated .com.kcl.api.Error type_errors = 4;`
     * @param values The typeErrors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTypeErrors")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, TypeErrorsProxy>.plusAssign(values: kotlin.collections.Iterable<com.kcl.api.Spec.Error>) {
      addAll(values)
    }
    /**
     * ```
     * List of type errors.
     * ```
     *
     * `repeated .com.kcl.api.Error type_errors = 4;`
     * @param index The index to set the value at.
     * @param value The typeErrors to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTypeErrors")
    public operator fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, TypeErrorsProxy>.set(index: kotlin.Int, value: com.kcl.api.Spec.Error) {
      _builder.setTypeErrors(index, value)
    }
    /**
     * ```
     * List of type errors.
     * ```
     *
     * `repeated .com.kcl.api.Error type_errors = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTypeErrors")
    public fun com.google.protobuf.kotlin.DslList<com.kcl.api.Spec.Error, TypeErrorsProxy>.clear() {
      _builder.clearTypeErrors()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ScopesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Map of scopes with scope index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Scope> scopes = 5;`
     */
     public val scopes: com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Scope, ScopesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getScopesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.scopesMap
      )
    /**
     * ```
     * Map of scopes with scope index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Scope> scopes = 5;`
     */
    @JvmName("putScopes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Scope, ScopesProxy>
      .put(key: kotlin.String, value: com.kcl.api.Spec.Scope) {
         _builder.putScopes(key, value)
       }
    /**
     * ```
     * Map of scopes with scope index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Scope> scopes = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setScopes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Scope, ScopesProxy>
      .set(key: kotlin.String, value: com.kcl.api.Spec.Scope) {
         put(key, value)
       }
    /**
     * ```
     * Map of scopes with scope index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Scope> scopes = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeScopes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Scope, ScopesProxy>
      .remove(key: kotlin.String) {
         _builder.removeScopes(key)
       }
    /**
     * ```
     * Map of scopes with scope index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Scope> scopes = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllScopes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Scope, ScopesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.kcl.api.Spec.Scope>) {
         _builder.putAllScopes(map)
       }
    /**
     * ```
     * Map of scopes with scope index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Scope> scopes = 5;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearScopes")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Scope, ScopesProxy>
      .clear() {
         _builder.clearScopes()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SymbolsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Map of symbols with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Symbol> symbols = 6;`
     */
     public val symbols: com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Symbol, SymbolsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSymbolsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.symbolsMap
      )
    /**
     * ```
     * Map of symbols with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Symbol> symbols = 6;`
     */
    @JvmName("putSymbols")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Symbol, SymbolsProxy>
      .put(key: kotlin.String, value: com.kcl.api.Spec.Symbol) {
         _builder.putSymbols(key, value)
       }
    /**
     * ```
     * Map of symbols with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Symbol> symbols = 6;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSymbols")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Symbol, SymbolsProxy>
      .set(key: kotlin.String, value: com.kcl.api.Spec.Symbol) {
         put(key, value)
       }
    /**
     * ```
     * Map of symbols with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Symbol> symbols = 6;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSymbols")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Symbol, SymbolsProxy>
      .remove(key: kotlin.String) {
         _builder.removeSymbols(key)
       }
    /**
     * ```
     * Map of symbols with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Symbol> symbols = 6;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSymbols")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Symbol, SymbolsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.kcl.api.Spec.Symbol>) {
         _builder.putAllSymbols(map)
       }
    /**
     * ```
     * Map of symbols with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.Symbol> symbols = 6;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSymbols")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.Symbol, SymbolsProxy>
      .clear() {
         _builder.clearSymbols()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class NodeSymbolMapProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Map of node-symbol associations with AST index UUID as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> node_symbol_map = 7;`
     */
     public val nodeSymbolMap: com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, NodeSymbolMapProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getNodeSymbolMapMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.nodeSymbolMapMap
      )
    /**
     * ```
     * Map of node-symbol associations with AST index UUID as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> node_symbol_map = 7;`
     */
    @JvmName("putNodeSymbolMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, NodeSymbolMapProxy>
      .put(key: kotlin.String, value: com.kcl.api.Spec.SymbolIndex) {
         _builder.putNodeSymbolMap(key, value)
       }
    /**
     * ```
     * Map of node-symbol associations with AST index UUID as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> node_symbol_map = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setNodeSymbolMap")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, NodeSymbolMapProxy>
      .set(key: kotlin.String, value: com.kcl.api.Spec.SymbolIndex) {
         put(key, value)
       }
    /**
     * ```
     * Map of node-symbol associations with AST index UUID as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> node_symbol_map = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeNodeSymbolMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, NodeSymbolMapProxy>
      .remove(key: kotlin.String) {
         _builder.removeNodeSymbolMap(key)
       }
    /**
     * ```
     * Map of node-symbol associations with AST index UUID as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> node_symbol_map = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllNodeSymbolMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, NodeSymbolMapProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.kcl.api.Spec.SymbolIndex>) {
         _builder.putAllNodeSymbolMap(map)
       }
    /**
     * ```
     * Map of node-symbol associations with AST index UUID as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> node_symbol_map = 7;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearNodeSymbolMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, NodeSymbolMapProxy>
      .clear() {
         _builder.clearNodeSymbolMap()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SymbolNodeMapProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Map of symbol-node associations with symbol index as key.
     * ```
     *
     * `map<string, string> symbol_node_map = 8;`
     */
     public val symbolNodeMap: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SymbolNodeMapProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSymbolNodeMapMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.symbolNodeMapMap
      )
    /**
     * ```
     * Map of symbol-node associations with symbol index as key.
     * ```
     *
     * `map<string, string> symbol_node_map = 8;`
     */
    @JvmName("putSymbolNodeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SymbolNodeMapProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putSymbolNodeMap(key, value)
       }
    /**
     * ```
     * Map of symbol-node associations with symbol index as key.
     * ```
     *
     * `map<string, string> symbol_node_map = 8;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSymbolNodeMap")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SymbolNodeMapProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * ```
     * Map of symbol-node associations with symbol index as key.
     * ```
     *
     * `map<string, string> symbol_node_map = 8;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSymbolNodeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SymbolNodeMapProxy>
      .remove(key: kotlin.String) {
         _builder.removeSymbolNodeMap(key)
       }
    /**
     * ```
     * Map of symbol-node associations with symbol index as key.
     * ```
     *
     * `map<string, string> symbol_node_map = 8;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSymbolNodeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SymbolNodeMapProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllSymbolNodeMap(map)
       }
    /**
     * ```
     * Map of symbol-node associations with symbol index as key.
     * ```
     *
     * `map<string, string> symbol_node_map = 8;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSymbolNodeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, SymbolNodeMapProxy>
      .clear() {
         _builder.clearSymbolNodeMap()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class FullyQualifiedNameMapProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Map of fully qualified names with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> fully_qualified_name_map = 9;`
     */
     public val fullyQualifiedNameMap: com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, FullyQualifiedNameMapProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getFullyQualifiedNameMapMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.fullyQualifiedNameMapMap
      )
    /**
     * ```
     * Map of fully qualified names with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> fully_qualified_name_map = 9;`
     */
    @JvmName("putFullyQualifiedNameMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, FullyQualifiedNameMapProxy>
      .put(key: kotlin.String, value: com.kcl.api.Spec.SymbolIndex) {
         _builder.putFullyQualifiedNameMap(key, value)
       }
    /**
     * ```
     * Map of fully qualified names with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> fully_qualified_name_map = 9;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setFullyQualifiedNameMap")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, FullyQualifiedNameMapProxy>
      .set(key: kotlin.String, value: com.kcl.api.Spec.SymbolIndex) {
         put(key, value)
       }
    /**
     * ```
     * Map of fully qualified names with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> fully_qualified_name_map = 9;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeFullyQualifiedNameMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, FullyQualifiedNameMapProxy>
      .remove(key: kotlin.String) {
         _builder.removeFullyQualifiedNameMap(key)
       }
    /**
     * ```
     * Map of fully qualified names with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> fully_qualified_name_map = 9;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllFullyQualifiedNameMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, FullyQualifiedNameMapProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.kcl.api.Spec.SymbolIndex>) {
         _builder.putAllFullyQualifiedNameMap(map)
       }
    /**
     * ```
     * Map of fully qualified names with symbol index as key.
     * ```
     *
     * `map<string, .com.kcl.api.SymbolIndex> fully_qualified_name_map = 9;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearFullyQualifiedNameMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.SymbolIndex, FullyQualifiedNameMapProxy>
      .clear() {
         _builder.clearFullyQualifiedNameMap()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PkgScopeMapProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Map of package scope with package path as key.
     * ```
     *
     * `map<string, .com.kcl.api.ScopeIndex> pkg_scope_map = 10;`
     */
     public val pkgScopeMap: com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.ScopeIndex, PkgScopeMapProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getPkgScopeMapMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.pkgScopeMapMap
      )
    /**
     * ```
     * Map of package scope with package path as key.
     * ```
     *
     * `map<string, .com.kcl.api.ScopeIndex> pkg_scope_map = 10;`
     */
    @JvmName("putPkgScopeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.ScopeIndex, PkgScopeMapProxy>
      .put(key: kotlin.String, value: com.kcl.api.Spec.ScopeIndex) {
         _builder.putPkgScopeMap(key, value)
       }
    /**
     * ```
     * Map of package scope with package path as key.
     * ```
     *
     * `map<string, .com.kcl.api.ScopeIndex> pkg_scope_map = 10;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setPkgScopeMap")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.ScopeIndex, PkgScopeMapProxy>
      .set(key: kotlin.String, value: com.kcl.api.Spec.ScopeIndex) {
         put(key, value)
       }
    /**
     * ```
     * Map of package scope with package path as key.
     * ```
     *
     * `map<string, .com.kcl.api.ScopeIndex> pkg_scope_map = 10;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removePkgScopeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.ScopeIndex, PkgScopeMapProxy>
      .remove(key: kotlin.String) {
         _builder.removePkgScopeMap(key)
       }
    /**
     * ```
     * Map of package scope with package path as key.
     * ```
     *
     * `map<string, .com.kcl.api.ScopeIndex> pkg_scope_map = 10;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllPkgScopeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.ScopeIndex, PkgScopeMapProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.kcl.api.Spec.ScopeIndex>) {
         _builder.putAllPkgScopeMap(map)
       }
    /**
     * ```
     * Map of package scope with package path as key.
     * ```
     *
     * `map<string, .com.kcl.api.ScopeIndex> pkg_scope_map = 10;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearPkgScopeMap")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.kcl.api.Spec.ScopeIndex, PkgScopeMapProxy>
      .clear() {
         _builder.clearPkgScopeMap()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.kcl.api.Spec.LoadPackage_Result.copy(block: `com.kcl.api`.LoadPackage_ResultKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.LoadPackage_Result =
  `com.kcl.api`.LoadPackage_ResultKt.Dsl._create(this.toBuilder()).apply { block() }._build()

