// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spec.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.kcl.api;

@kotlin.jvm.JvmName("-initializeloadPackageArgs")
public inline fun loadPackageArgs(block: com.kcl.api.LoadPackage_ArgsKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.LoadPackage_Args =
  com.kcl.api.LoadPackage_ArgsKt.Dsl._create(com.kcl.api.Spec.LoadPackage_Args.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message for load package request arguments.
 * ```
 *
 * Protobuf type `com.kcl.api.LoadPackage_Args`
 */
public object LoadPackage_ArgsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.kcl.api.Spec.LoadPackage_Args.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.kcl.api.Spec.LoadPackage_Args.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.kcl.api.Spec.LoadPackage_Args = _builder.build()

    /**
     * ```
     * Arguments for parsing the program.
     * ```
     *
     * `.com.kcl.api.ParseProgram_Args parse_args = 1;`
     */
    public var parseArgs: com.kcl.api.Spec.ParseProgram_Args
      @JvmName("getParseArgs")
      get() = _builder.parseArgs
      @JvmName("setParseArgs")
      set(value) {
        _builder.parseArgs = value
      }
    /**
     * ```
     * Arguments for parsing the program.
     * ```
     *
     * `.com.kcl.api.ParseProgram_Args parse_args = 1;`
     */
    public fun clearParseArgs() {
      _builder.clearParseArgs()
    }
    /**
     * ```
     * Arguments for parsing the program.
     * ```
     *
     * `.com.kcl.api.ParseProgram_Args parse_args = 1;`
     * @return Whether the parseArgs field is set.
     */
    public fun hasParseArgs(): kotlin.Boolean {
      return _builder.hasParseArgs()
    }

    public val LoadPackage_ArgsKt.Dsl.parseArgsOrNull: com.kcl.api.Spec.ParseProgram_Args?
      get() = _builder.parseArgsOrNull

    /**
     * ```
     * Flag indicating whether to resolve AST.
     * ```
     *
     * `bool resolve_ast = 2;`
     */
    public var resolveAst: kotlin.Boolean
      @JvmName("getResolveAst")
      get() = _builder.resolveAst
      @JvmName("setResolveAst")
      set(value) {
        _builder.resolveAst = value
      }
    /**
     * ```
     * Flag indicating whether to resolve AST.
     * ```
     *
     * `bool resolve_ast = 2;`
     */
    public fun clearResolveAst() {
      _builder.clearResolveAst()
    }

    /**
     * ```
     * Flag indicating whether to load built-in modules.
     * ```
     *
     * `bool load_builtin = 3;`
     */
    public var loadBuiltin: kotlin.Boolean
      @JvmName("getLoadBuiltin")
      get() = _builder.loadBuiltin
      @JvmName("setLoadBuiltin")
      set(value) {
        _builder.loadBuiltin = value
      }
    /**
     * ```
     * Flag indicating whether to load built-in modules.
     * ```
     *
     * `bool load_builtin = 3;`
     */
    public fun clearLoadBuiltin() {
      _builder.clearLoadBuiltin()
    }

    /**
     * ```
     * Flag indicating whether to include AST index.
     * ```
     *
     * `bool with_ast_index = 4;`
     */
    public var withAstIndex: kotlin.Boolean
      @JvmName("getWithAstIndex")
      get() = _builder.withAstIndex
      @JvmName("setWithAstIndex")
      set(value) {
        _builder.withAstIndex = value
      }
    /**
     * ```
     * Flag indicating whether to include AST index.
     * ```
     *
     * `bool with_ast_index = 4;`
     */
    public fun clearWithAstIndex() {
      _builder.clearWithAstIndex()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.kcl.api.Spec.LoadPackage_Args.copy(block: `com.kcl.api`.LoadPackage_ArgsKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.LoadPackage_Args =
  `com.kcl.api`.LoadPackage_ArgsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.kcl.api.Spec.LoadPackage_ArgsOrBuilder.parseArgsOrNull: com.kcl.api.Spec.ParseProgram_Args?
  get() = if (hasParseArgs()) getParseArgs() else null

