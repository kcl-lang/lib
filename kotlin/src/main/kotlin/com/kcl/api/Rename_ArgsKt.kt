// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spec.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.kcl.api;

@kotlin.jvm.JvmName("-initializerenameArgs")
public inline fun renameArgs(block: com.kcl.api.Rename_ArgsKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.Rename_Args =
  com.kcl.api.Rename_ArgsKt.Dsl._create(com.kcl.api.Spec.Rename_Args.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message for rename request arguments.
 * ```
 *
 * Protobuf type `com.kcl.api.Rename_Args`
 */
public object Rename_ArgsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.kcl.api.Spec.Rename_Args.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.kcl.api.Spec.Rename_Args.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.kcl.api.Spec.Rename_Args = _builder.build()

    /**
     * ```
     * File path to the package root.
     * ```
     *
     * `string package_root = 1;`
     */
    public var packageRoot: kotlin.String
      @JvmName("getPackageRoot")
      get() = _builder.packageRoot
      @JvmName("setPackageRoot")
      set(value) {
        _builder.packageRoot = value
      }
    /**
     * ```
     * File path to the package root.
     * ```
     *
     * `string package_root = 1;`
     */
    public fun clearPackageRoot() {
      _builder.clearPackageRoot()
    }

    /**
     * ```
     * Path to the target symbol to be renamed.
     * ```
     *
     * `string symbol_path = 2;`
     */
    public var symbolPath: kotlin.String
      @JvmName("getSymbolPath")
      get() = _builder.symbolPath
      @JvmName("setSymbolPath")
      set(value) {
        _builder.symbolPath = value
      }
    /**
     * ```
     * Path to the target symbol to be renamed.
     * ```
     *
     * `string symbol_path = 2;`
     */
    public fun clearSymbolPath() {
      _builder.clearSymbolPath()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class FilePathsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Paths to the source code files.
     * ```
     *
     * `repeated string file_paths = 3;`
     * @return A list containing the filePaths.
     */
    public val filePaths: com.google.protobuf.kotlin.DslList<kotlin.String, FilePathsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.filePathsList
      )
    /**
     * ```
     * Paths to the source code files.
     * ```
     *
     * `repeated string file_paths = 3;`
     * @param value The filePaths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addFilePaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, FilePathsProxy>.add(value: kotlin.String) {
      _builder.addFilePaths(value)
    }
    /**
     * ```
     * Paths to the source code files.
     * ```
     *
     * `repeated string file_paths = 3;`
     * @param value The filePaths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignFilePaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, FilePathsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * Paths to the source code files.
     * ```
     *
     * `repeated string file_paths = 3;`
     * @param values The filePaths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllFilePaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, FilePathsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllFilePaths(values)
    }
    /**
     * ```
     * Paths to the source code files.
     * ```
     *
     * `repeated string file_paths = 3;`
     * @param values The filePaths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllFilePaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, FilePathsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * Paths to the source code files.
     * ```
     *
     * `repeated string file_paths = 3;`
     * @param index The index to set the value at.
     * @param value The filePaths to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setFilePaths")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, FilePathsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setFilePaths(index, value)
    }/**
     * ```
     * Paths to the source code files.
     * ```
     *
     * `repeated string file_paths = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearFilePaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, FilePathsProxy>.clear() {
      _builder.clearFilePaths()
    }
    /**
     * ```
     * New name of the symbol.
     * ```
     *
     * `string new_name = 4;`
     */
    public var newName: kotlin.String
      @JvmName("getNewName")
      get() = _builder.newName
      @JvmName("setNewName")
      set(value) {
        _builder.newName = value
      }
    /**
     * ```
     * New name of the symbol.
     * ```
     *
     * `string new_name = 4;`
     */
    public fun clearNewName() {
      _builder.clearNewName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.kcl.api.Spec.Rename_Args.copy(block: `com.kcl.api`.Rename_ArgsKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.Rename_Args =
  `com.kcl.api`.Rename_ArgsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

