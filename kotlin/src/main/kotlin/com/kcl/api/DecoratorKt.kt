// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spec.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.kcl.api;

@kotlin.jvm.JvmName("-initializedecorator")
public inline fun decorator(block: com.kcl.api.DecoratorKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.Decorator =
  com.kcl.api.DecoratorKt.Dsl._create(com.kcl.api.Spec.Decorator.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message representing a decorator in KCL.
 * ```
 *
 * Protobuf type `com.kcl.api.Decorator`
 */
public object DecoratorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.kcl.api.Spec.Decorator.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: com.kcl.api.Spec.Decorator.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): com.kcl.api.Spec.Decorator = _builder.build()

    /**
     * ```
     * Name of the decorator.
     * ```
     *
     * `string name = 1;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.name
      @JvmName("setName")
      set(value) {
        _builder.name = value
      }
    /**
     * ```
     * Name of the decorator.
     * ```
     *
     * `string name = 1;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ArgumentsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Arguments for the decorator.
     * ```
     *
     * `repeated string arguments = 2;`
     * @return A list containing the arguments.
     */
    public val arguments: com.google.protobuf.kotlin.DslList<kotlin.String, ArgumentsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.argumentsList
      )
    /**
     * ```
     * Arguments for the decorator.
     * ```
     *
     * `repeated string arguments = 2;`
     * @param value The arguments to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addArguments")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgumentsProxy>.add(value: kotlin.String) {
      _builder.addArguments(value)
    }
    /**
     * ```
     * Arguments for the decorator.
     * ```
     *
     * `repeated string arguments = 2;`
     * @param value The arguments to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignArguments")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgumentsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * Arguments for the decorator.
     * ```
     *
     * `repeated string arguments = 2;`
     * @param values The arguments to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllArguments")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgumentsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllArguments(values)
    }
    /**
     * ```
     * Arguments for the decorator.
     * ```
     *
     * `repeated string arguments = 2;`
     * @param values The arguments to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllArguments")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgumentsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * Arguments for the decorator.
     * ```
     *
     * `repeated string arguments = 2;`
     * @param index The index to set the value at.
     * @param value The arguments to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setArguments")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgumentsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setArguments(index, value)
    }/**
     * ```
     * Arguments for the decorator.
     * ```
     *
     * `repeated string arguments = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearArguments")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgumentsProxy>.clear() {
      _builder.clearArguments()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class KeywordsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * Keyword arguments for the decorator as a map with keyword name as key.
     * ```
     *
     * `map<string, string> keywords = 3;`
     */
     public val keywords: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, KeywordsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getKeywordsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.keywordsMap
      )
    /**
     * ```
     * Keyword arguments for the decorator as a map with keyword name as key.
     * ```
     *
     * `map<string, string> keywords = 3;`
     */
    @JvmName("putKeywords")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, KeywordsProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putKeywords(key, value)
       }
    /**
     * ```
     * Keyword arguments for the decorator as a map with keyword name as key.
     * ```
     *
     * `map<string, string> keywords = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setKeywords")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, KeywordsProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * ```
     * Keyword arguments for the decorator as a map with keyword name as key.
     * ```
     *
     * `map<string, string> keywords = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeKeywords")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, KeywordsProxy>
      .remove(key: kotlin.String) {
         _builder.removeKeywords(key)
       }
    /**
     * ```
     * Keyword arguments for the decorator as a map with keyword name as key.
     * ```
     *
     * `map<string, string> keywords = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllKeywords")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, KeywordsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllKeywords(map)
       }
    /**
     * ```
     * Keyword arguments for the decorator as a map with keyword name as key.
     * ```
     *
     * `map<string, string> keywords = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearKeywords")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, KeywordsProxy>
      .clear() {
         _builder.clearKeywords()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.kcl.api.Spec.Decorator.copy(block: `com.kcl.api`.DecoratorKt.Dsl.() -> kotlin.Unit): com.kcl.api.Spec.Decorator =
  `com.kcl.api`.DecoratorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

